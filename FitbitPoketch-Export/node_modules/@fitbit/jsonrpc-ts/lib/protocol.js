"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.error = exports.response = exports.notification = exports.request = exports.parse = exports.ErrorJSON = exports.ResponseJSON = exports.NotificationJSON = exports.RequestJSON = exports.RPCError = exports.RPCParams = exports.RPCID = exports.Some = exports.Structured = exports.Primitive = void 0;
var t = require("io-ts");
exports.Primitive = t.union([t.string, t.number, t.boolean, t.null]);
exports.Structured = t.union([t.dictionary(t.string, t.any), t.Array]);
exports.Some = t.union([exports.Primitive, exports.Structured]);
exports.RPCID = t.union([t.Integer, t.string]);
exports.RPCParams = t.union([exports.Structured, t.undefined]);
exports.RPCError = t.intersection([
    t.interface({
        code: t.Integer,
        message: t.string,
    }),
    t.partial({
        data: exports.Some,
    }),
]);
exports.RequestJSON = t.intersection([
    t.interface({
        jsonrpc: t.literal('2.0'),
        method: t.string,
        id: exports.RPCID,
    }),
    t.partial({
        params: exports.RPCParams,
        result: t.undefined,
        error: t.undefined,
    }),
]);
exports.NotificationJSON = t.intersection([
    t.interface({
        jsonrpc: t.literal('2.0'),
        method: t.string,
    }),
    t.partial({
        params: exports.RPCParams,
        id: t.undefined,
        result: t.undefined,
        error: t.undefined,
    }),
]);
exports.ResponseJSON = t.intersection([
    t.interface({
        jsonrpc: t.literal('2.0'),
        result: exports.Some,
        id: t.union([t.Integer, t.string]),
    }),
    t.partial({
        method: t.undefined,
        params: t.undefined,
        error: t.undefined,
    }),
]);
exports.ErrorJSON = t.intersection([
    t.interface({
        jsonrpc: t.literal('2.0'),
        error: exports.RPCError,
        id: t.union([exports.RPCID, t.null]),
    }),
    t.partial({
        method: t.undefined,
        params: t.undefined,
        result: t.undefined,
    }),
]);
function parse(obj) {
    if (exports.RequestJSON.is(obj)) {
        return {
            kind: 'request',
            id: obj.id,
            method: obj.method,
            params: obj.params,
        };
    }
    if (exports.NotificationJSON.is(obj)) {
        return {
            kind: 'notification',
            method: obj.method,
            params: obj.params,
        };
    }
    if (exports.ResponseJSON.is(obj)) {
        return {
            kind: 'response',
            id: obj.id,
            result: obj.result,
        };
    }
    if (exports.ErrorJSON.is(obj)) {
        return {
            kind: 'error',
            id: obj.id,
            error: obj.error,
        };
    }
    throw new TypeError('Not a valid JSON-RPC object');
}
exports.parse = parse;
function request(id, method, params) {
    if (!exports.RPCID.is(id)) {
        throw new TypeError('Request ID must be a string or integer');
    }
    return { id: id, method: method, params: params, jsonrpc: '2.0' };
}
exports.request = request;
function notification(method, params) {
    return { method: method, params: params, jsonrpc: '2.0' };
}
exports.notification = notification;
function response(id, result) {
    if (!exports.RPCID.is(id)) {
        throw new TypeError('Response ID must be a string or integer');
    }
    var nulledResult = result !== undefined ? result : null;
    return { id: id, jsonrpc: '2.0', result: nulledResult };
}
exports.response = response;
function error(error) {
    var id = error.id, code = error.code, message = error.message, data = error.data;
    var nulledId = id !== undefined ? id : null;
    if (nulledId !== null && !exports.RPCID.is(id)) {
        throw new TypeError('Error ID must be string, integer, null or undefined');
    }
    if (!t.Integer.is(code)) {
        throw new TypeError('Error code must be an integer');
    }
    return { jsonrpc: '2.0', id: nulledId, error: { code: code, message: message, data: data } };
}
exports.error = error;
