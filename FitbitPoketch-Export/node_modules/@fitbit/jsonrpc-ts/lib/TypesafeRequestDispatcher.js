"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PathReporter_1 = require("io-ts/lib/PathReporter");
var Either_1 = require("fp-ts/lib/Either");
var peer = require("./peer");
var TypesafeRequestDispatcher = (function () {
    function TypesafeRequestDispatcher() {
        var _this = this;
        this.requestHandlers = new Map();
        this.notificationHandlers = new Map();
        this.defaultNotificationHandler = function () { };
        this.onRequest = function (method, params) {
            var handlers = _this.requestHandlers.get(method);
            if (handlers === undefined) {
                throw new peer.MethodNotFound("No such method: '" + method + "'");
            }
            else {
                var validationErrors = [];
                for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
                    var _a = handlers_1[_i], fn = _a.fn, paramsType = _a.paramsType;
                    var decoded = paramsType.decode(params);
                    if (Either_1.isRight(decoded)) {
                        return fn(decoded.right);
                    }
                    validationErrors.push(PathReporter_1.PathReporter.report(decoded));
                }
                throw new peer.InvalidParams("Invalid parameters for method " + method, validationErrors);
            }
        };
        this.onNotification = function (method, params) {
            var handlers = _this.notificationHandlers.get(method);
            if (handlers !== undefined) {
                for (var _i = 0, handlers_2 = handlers; _i < handlers_2.length; _i++) {
                    var _a = handlers_2[_i], fn = _a.fn, paramsType = _a.paramsType;
                    var decoded = paramsType.decode(params);
                    if (Either_1.isRight(decoded)) {
                        fn(decoded.right);
                        return;
                    }
                }
            }
            _this.defaultNotificationHandler(method, params);
        };
    }
    TypesafeRequestDispatcher.register = function (collection, name, paramsType, impl) {
        if (name.startsWith('rpc.')) {
            throw new TypeError('Method names beginning with "rpc." are reserved');
        }
        var handlers = collection.get(name);
        if (handlers === undefined) {
            collection.set(name, [{ paramsType: paramsType, fn: impl }]);
        }
        else {
            handlers.push({ paramsType: paramsType, fn: impl });
        }
    };
    TypesafeRequestDispatcher.prototype.method = function (name, paramsType, impl) {
        TypesafeRequestDispatcher.register(this.requestHandlers, name, paramsType, impl);
        return this;
    };
    TypesafeRequestDispatcher.prototype.notification = function (name, paramsType, impl) {
        TypesafeRequestDispatcher.register(this.notificationHandlers, name, paramsType, impl);
        return this;
    };
    return TypesafeRequestDispatcher;
}());
exports.default = TypesafeRequestDispatcher;
