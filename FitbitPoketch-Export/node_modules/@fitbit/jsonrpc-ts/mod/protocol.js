import * as t from 'io-ts';
export var Primitive = t.union([t.string, t.number, t.boolean, t.null]);
export var Structured = t.union([t.dictionary(t.string, t.any), t.Array]);
export var Some = t.union([Primitive, Structured]);
export var RPCID = t.union([t.Integer, t.string]);
export var RPCParams = t.union([Structured, t.undefined]);
export var RPCError = t.intersection([
    t.interface({
        code: t.Integer,
        message: t.string,
    }),
    t.partial({
        data: Some,
    }),
]);
export var RequestJSON = t.intersection([
    t.interface({
        jsonrpc: t.literal('2.0'),
        method: t.string,
        id: RPCID,
    }),
    t.partial({
        params: RPCParams,
        result: t.undefined,
        error: t.undefined,
    }),
]);
export var NotificationJSON = t.intersection([
    t.interface({
        jsonrpc: t.literal('2.0'),
        method: t.string,
    }),
    t.partial({
        params: RPCParams,
        id: t.undefined,
        result: t.undefined,
        error: t.undefined,
    }),
]);
export var ResponseJSON = t.intersection([
    t.interface({
        jsonrpc: t.literal('2.0'),
        result: Some,
        id: t.union([t.Integer, t.string]),
    }),
    t.partial({
        method: t.undefined,
        params: t.undefined,
        error: t.undefined,
    }),
]);
export var ErrorJSON = t.intersection([
    t.interface({
        jsonrpc: t.literal('2.0'),
        error: RPCError,
        id: t.union([RPCID, t.null]),
    }),
    t.partial({
        method: t.undefined,
        params: t.undefined,
        result: t.undefined,
    }),
]);
export function parse(obj) {
    if (RequestJSON.is(obj)) {
        return {
            kind: 'request',
            id: obj.id,
            method: obj.method,
            params: obj.params,
        };
    }
    if (NotificationJSON.is(obj)) {
        return {
            kind: 'notification',
            method: obj.method,
            params: obj.params,
        };
    }
    if (ResponseJSON.is(obj)) {
        return {
            kind: 'response',
            id: obj.id,
            result: obj.result,
        };
    }
    if (ErrorJSON.is(obj)) {
        return {
            kind: 'error',
            id: obj.id,
            error: obj.error,
        };
    }
    throw new TypeError('Not a valid JSON-RPC object');
}
export function request(id, method, params) {
    if (!RPCID.is(id)) {
        throw new TypeError('Request ID must be a string or integer');
    }
    return { id: id, method: method, params: params, jsonrpc: '2.0' };
}
export function notification(method, params) {
    return { method: method, params: params, jsonrpc: '2.0' };
}
export function response(id, result) {
    if (!RPCID.is(id)) {
        throw new TypeError('Response ID must be a string or integer');
    }
    var nulledResult = result !== undefined ? result : null;
    return { id: id, jsonrpc: '2.0', result: nulledResult };
}
export function error(error) {
    var id = error.id, code = error.code, message = error.message, data = error.data;
    var nulledId = id !== undefined ? id : null;
    if (nulledId !== null && !RPCID.is(id)) {
        throw new TypeError('Error ID must be string, integer, null or undefined');
    }
    if (!t.Integer.is(code)) {
        throw new TypeError('Error code must be an integer');
    }
    return { jsonrpc: '2.0', id: nulledId, error: { code: code, message: message, data: data } };
}
