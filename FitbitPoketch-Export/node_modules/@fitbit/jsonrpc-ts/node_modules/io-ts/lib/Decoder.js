"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.stringify = exports.draw = exports.WithRefine = exports.WithUnion = exports.WithUnknownContainers = exports.Schemable = exports.Category = exports.Alt = exports.Functor = exports.URI = exports.id = exports.compose = exports.alt = exports.map = exports.lazy = exports.sum = exports.fromSum = exports.intersect = exports.union = exports.tuple = exports.fromTuple = exports.record = exports.fromRecord = exports.array = exports.fromArray = exports.partial = exports.fromPartial = exports.type = exports.fromType = exports.nullable = exports.parse = exports.refine = exports.withMessage = exports.mapLeftWithInput = exports.UnknownRecord = exports.UnknownArray = exports.boolean = exports.number = exports.string = exports.literal = exports.fromGuard = exports.fromRefinement = exports.failure = exports.success = exports.error = exports.ap = exports.SE = void 0;
var E = __importStar(require("fp-ts/lib/Either"));
var pipeable_1 = require("fp-ts/lib/pipeable");
var DE = __importStar(require("./DecodeError"));
var FS = __importStar(require("./FreeSemigroup"));
var G = __importStar(require("./Guard"));
var K = __importStar(require("./Kleisli"));
// -------------------------------------------------------------------------------------
// Kleisli config
// -------------------------------------------------------------------------------------
/**
 * @internal
 */
exports.SE = 
/*#__PURE__*/
DE.getSemigroup();
/**
 * @internal
 */
exports.ap = function (fab, fa) {
    return E.isLeft(fab)
        ? E.isLeft(fa)
            ? E.left(exports.SE.concat(fab.left, fa.left))
            : fab
        : E.isLeft(fa)
            ? fa
            : E.right(fab.right(fa.right));
};
var M = {
    URI: E.URI,
    _E: undefined,
    map: function (fa, f) { return pipeable_1.pipe(fa, E.map(f)); },
    ap: exports.ap,
    of: E.right,
    chain: function (ma, f) { return pipeable_1.pipe(ma, E.chain(f)); },
    throwError: E.left,
    bimap: function (fa, f, g) { return pipeable_1.pipe(fa, E.bimap(f, g)); },
    mapLeft: function (fa, f) { return pipeable_1.pipe(fa, E.mapLeft(f)); },
    alt: function (me, that) {
        if (E.isRight(me)) {
            return me;
        }
        var ea = that();
        return E.isLeft(ea) ? E.left(exports.SE.concat(me.left, ea.left)) : ea;
    }
};
/**
 * @category DecodeError
 * @since 2.2.7
 */
exports.error = function (actual, message) { return FS.of(DE.leaf(actual, message)); };
/**
 * @category DecodeError
 * @since 2.2.7
 */
exports.success = E.right;
/**
 * @category DecodeError
 * @since 2.2.7
 */
exports.failure = function (actual, message) {
    return E.left(exports.error(actual, message));
};
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * @category constructors
 * @since 2.2.8
 */
exports.fromRefinement = function (refinement, expected) {
    return K.fromRefinement(M)(refinement, function (u) { return exports.error(u, expected); });
};
/**
 * @category constructors
 * @since 2.2.8
 */
exports.fromGuard = function (guard, expected) {
    return exports.fromRefinement(guard.is, expected);
};
/**
 * @category constructors
 * @since 2.2.7
 */
exports.literal = 
/*#__PURE__*/
K.literal(M)(function (u, values) { return exports.error(u, values.map(function (value) { return JSON.stringify(value); }).join(' | ')); });
// -------------------------------------------------------------------------------------
// primitives
// -------------------------------------------------------------------------------------
/**
 * @category primitives
 * @since 2.2.7
 */
exports.string = 
/*#__PURE__*/
exports.fromGuard(G.string, 'string');
/**
 * @category primitives
 * @since 2.2.7
 */
exports.number = 
/*#__PURE__*/
exports.fromGuard(G.number, 'number');
/**
 * @category primitives
 * @since 2.2.7
 */
exports.boolean = 
/*#__PURE__*/
exports.fromGuard(G.boolean, 'boolean');
/**
 * @category primitives
 * @since 2.2.7
 */
exports.UnknownArray = 
/*#__PURE__*/
exports.fromGuard(G.UnknownArray, 'Array<unknown>');
/**
 * @category primitives
 * @since 2.2.7
 */
exports.UnknownRecord = 
/*#__PURE__*/
exports.fromGuard(G.UnknownRecord, 'Record<string, unknown>');
// -------------------------------------------------------------------------------------
// combinators
// -------------------------------------------------------------------------------------
/**
 * @category combinators
 * @since 2.2.7
 */
exports.mapLeftWithInput = 
/*#__PURE__*/
K.mapLeftWithInput(M);
/**
 * @category combinators
 * @since 2.2.9
 */
exports.withMessage = function (message) {
    return exports.mapLeftWithInput(function (input, e) { return FS.of(DE.wrap(message(input, e), e)); });
};
/**
 * @category combinators
 * @since 2.2.7
 */
exports.refine = function (refinement, id) { return K.refine(M)(refinement, function (a) { return exports.error(a, id); }); };
/**
 * @category combinators
 * @since 2.2.7
 */
exports.parse = 
/*#__PURE__*/
K.parse(M);
/**
 * @category combinators
 * @since 2.2.7
 */
exports.nullable = 
/*#__PURE__*/
K.nullable(M)(function (u, e) { return FS.concat(FS.of(DE.member(0, exports.error(u, 'null'))), FS.of(DE.member(1, e))); });
/**
 * @category combinators
 * @since 2.2.8
 */
exports.fromType = function (properties) {
    return K.fromType(M)(function (k, e) { return FS.of(DE.key(k, DE.required, e)); })(properties);
};
/**
 * @category combinators
 * @since 2.2.7
 */
exports.type = function (properties) { return pipeable_1.pipe(exports.UnknownRecord, exports.compose(exports.fromType(properties))); };
/**
 * @category combinators
 * @since 2.2.8
 */
exports.fromPartial = function (properties) {
    return K.fromPartial(M)(function (k, e) { return FS.of(DE.key(k, DE.optional, e)); })(properties);
};
/**
 * @category combinators
 * @since 2.2.7
 */
exports.partial = function (properties) { return pipeable_1.pipe(exports.UnknownRecord, exports.compose(exports.fromPartial(properties))); };
/**
 * @category combinators
 * @since 2.2.8
 */
exports.fromArray = function (item) {
    return K.fromArray(M)(function (i, e) { return FS.of(DE.index(i, DE.optional, e)); })(item);
};
/**
 * @category combinators
 * @since 2.2.7
 */
exports.array = function (item) {
    return pipeable_1.pipe(exports.UnknownArray, exports.compose(exports.fromArray(item)));
};
/**
 * @category combinators
 * @since 2.2.8
 */
exports.fromRecord = function (codomain) {
    return K.fromRecord(M)(function (k, e) { return FS.of(DE.key(k, DE.optional, e)); })(codomain);
};
/**
 * @category combinators
 * @since 2.2.7
 */
exports.record = function (codomain) {
    return pipeable_1.pipe(exports.UnknownRecord, exports.compose(exports.fromRecord(codomain)));
};
/**
 * @category combinators
 * @since 2.2.8
 */
exports.fromTuple = function () {
    var components = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
    }
    return K.fromTuple(M)(function (i, e) { return FS.of(DE.index(i, DE.required, e)); }).apply(void 0, components);
};
/**
 * @category combinators
 * @since 2.2.7
 */
exports.tuple = function () {
    var components = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        components[_i] = arguments[_i];
    }
    return pipeable_1.pipe(exports.UnknownArray, exports.compose(exports.fromTuple.apply(void 0, components)));
};
/**
 * @category combinators
 * @since 2.2.7
 */
exports.union = 
/*#__PURE__*/
K.union(M)(function (i, e) { return FS.of(DE.member(i, e)); });
/**
 * @category combinators
 * @since 2.2.7
 */
exports.intersect = 
/*#__PURE__*/
K.intersect(M);
/**
 * @category combinators
 * @since 2.2.8
 */
exports.fromSum = function (tag) { return function (members) {
    return K.fromSum(M)(function (tag, value, keys) {
        return FS.of(DE.key(tag, DE.required, exports.error(value, keys.length === 0 ? 'never' : keys.map(function (k) { return JSON.stringify(k); }).join(' | '))));
    })(tag)(members);
}; };
/**
 * @category combinators
 * @since 2.2.7
 */
exports.sum = function (tag) { return function (members) { return pipeable_1.pipe(exports.UnknownRecord, exports.compose(exports.fromSum(tag)(members))); }; };
/**
 * @category combinators
 * @since 2.2.7
 */
exports.lazy = 
/*#__PURE__*/
K.lazy(M)(function (id, e) { return FS.of(DE.lazy(id, e)); });
// -------------------------------------------------------------------------------------
// non-pipeables
// -------------------------------------------------------------------------------------
var map_ = function (fa, f) { return pipeable_1.pipe(fa, exports.map(f)); };
var alt_ = function (me, that) { return pipeable_1.pipe(me, exports.alt(that)); };
var compose_ = function (ab, la) { return pipeable_1.pipe(la, exports.compose(ab)); };
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * @category Functor
 * @since 2.2.7
 */
exports.map = 
/*#__PURE__*/
K.map(M);
/**
 * @category Alt
 * @since 2.2.7
 */
exports.alt = 
/*#__PURE__*/
K.alt(M);
/**
 * @category Semigroupoid
 * @since 2.2.8
 */
exports.compose = 
/*#__PURE__*/
K.compose(M);
/**
 * @category Category
 * @since 2.2.8
 */
exports.id = 
/*#__PURE__*/
K.id(M);
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 2.2.7
 */
exports.URI = 'io-ts/Decoder';
/**
 * @category instances
 * @since 2.2.8
 */
exports.Functor = {
    URI: exports.URI,
    map: map_
};
/**
 * @category instances
 * @since 2.2.8
 */
exports.Alt = {
    URI: exports.URI,
    map: map_,
    alt: alt_
};
/**
 * @category instances
 * @since 2.2.8
 */
exports.Category = {
    URI: exports.URI,
    compose: compose_,
    id: exports.id
};
/**
 * @category instances
 * @since 2.2.8
 */
exports.Schemable = {
    URI: exports.URI,
    literal: exports.literal,
    string: exports.string,
    number: exports.number,
    boolean: exports.boolean,
    nullable: exports.nullable,
    type: exports.type,
    partial: exports.partial,
    record: exports.record,
    array: exports.array,
    tuple: exports.tuple,
    intersect: exports.intersect,
    sum: exports.sum,
    lazy: exports.lazy
};
/**
 * @category instances
 * @since 2.2.8
 */
exports.WithUnknownContainers = {
    UnknownArray: exports.UnknownArray,
    UnknownRecord: exports.UnknownRecord
};
/**
 * @category instances
 * @since 2.2.8
 */
exports.WithUnion = {
    union: exports.union
};
/**
 * @category instances
 * @since 2.2.8
 */
exports.WithRefine = {
    refine: exports.refine
};
var empty = [];
var make = function (value, forest) {
    if (forest === void 0) { forest = empty; }
    return ({
        value: value,
        forest: forest
    });
};
var drawTree = function (tree) { return tree.value + drawForest('\n', tree.forest); };
var drawForest = function (indentation, forest) {
    var r = '';
    var len = forest.length;
    var tree;
    for (var i = 0; i < len; i++) {
        tree = forest[i];
        var isLast = i === len - 1;
        r += indentation + (isLast ? '└' : '├') + '─ ' + tree.value;
        r += drawForest(indentation + (len > 1 && !isLast ? '│  ' : '   '), tree.forest);
    }
    return r;
};
var toTree = DE.fold({
    Leaf: function (input, error) { return make("cannot decode " + JSON.stringify(input) + ", should be " + error); },
    Key: function (key, kind, errors) { return make(kind + " property " + JSON.stringify(key), toForest(errors)); },
    Index: function (index, kind, errors) { return make(kind + " index " + index, toForest(errors)); },
    Member: function (index, errors) { return make("member " + index, toForest(errors)); },
    Lazy: function (id, errors) { return make("lazy type " + id, toForest(errors)); },
    Wrap: function (error, errors) { return make(error, toForest(errors)); }
});
var toForest = FS.fold(function (value) { return [toTree(value)]; }, function (left, right) { return toForest(left).concat(toForest(right)); });
/**
 * @since 2.2.7
 */
exports.draw = function (e) { return toForest(e).map(drawTree).join('\n'); };
/**
 * @internal
 */
exports.stringify = 
/*#__PURE__*/
E.fold(exports.draw, function (a) { return JSON.stringify(a, null, 2); });
