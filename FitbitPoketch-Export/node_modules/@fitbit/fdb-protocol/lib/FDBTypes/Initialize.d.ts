import * as t from 'io-ts';
export declare const DebuggerCapabilities: t.PartialC<{
    protocol: t.PartialC<{
        batchRequest: t.BooleanC;
        maxMessageSize: t.RefinementC<t.RefinementC<t.NumberC>>;
        additionalSerializations: t.ArrayC<t.StringC>;
    }>;
    io: t.PartialC<{
        write: t.BooleanC;
        additionalEncodings: t.ArrayC<t.StringC>;
    }>;
    console: t.PartialC<{
        appLogging: t.BooleanC;
    }>;
    experimental: t.AnyC;
}>;
export declare type DebuggerCapabilities = t.TypeOf<typeof DebuggerCapabilities>;
export declare const InitializeParams: t.IntersectionC<[t.TypeC<{
    capabilities: t.PartialC<{
        protocol: t.PartialC<{
            batchRequest: t.BooleanC;
            maxMessageSize: t.RefinementC<t.RefinementC<t.NumberC>>;
            additionalSerializations: t.ArrayC<t.StringC>;
        }>;
        io: t.PartialC<{
            write: t.BooleanC;
            additionalEncodings: t.ArrayC<t.StringC>;
        }>;
        console: t.PartialC<{
            appLogging: t.BooleanC;
        }>;
        experimental: t.AnyC;
    }>;
}>, t.PartialC<{
    userAgent: t.StringC;
}>]>;
export declare type InitializeParams = t.TypeOf<typeof InitializeParams>;
export declare const HostKind: t.UnionC<[t.LiteralC<"device">, t.LiteralC<"companion">]>;
export declare type HostKind = t.TypeOf<typeof HostKind>;
export declare const AppDebugCapabilities: t.PartialC<{
    heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
        supported: t.BooleanC;
    }>, t.PartialC<{
        requiresInstrumentedLaunch: t.BooleanC;
    }>]>, t.PartialC<{
        formats: t.ArrayC<t.StringC>;
    }>]>;
    evalToString: t.IntersectionC<[t.TypeC<{
        supported: t.BooleanC;
    }>, t.PartialC<{
        requiresInstrumentedLaunch: t.BooleanC;
    }>]>;
}>;
export declare type AppDebugCapabilities = t.TypeOf<typeof AppDebugCapabilities>;
export declare const DebugCapabilities: t.PartialC<{
    app: t.PartialC<{
        heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
            supported: t.BooleanC;
        }>, t.PartialC<{
            requiresInstrumentedLaunch: t.BooleanC;
        }>]>, t.PartialC<{
            formats: t.ArrayC<t.StringC>;
        }>]>;
        evalToString: t.IntersectionC<[t.TypeC<{
            supported: t.BooleanC;
        }>, t.PartialC<{
            requiresInstrumentedLaunch: t.BooleanC;
        }>]>;
    }>;
    companion: t.PartialC<{
        heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
            supported: t.BooleanC;
        }>, t.PartialC<{
            requiresInstrumentedLaunch: t.BooleanC;
        }>]>, t.PartialC<{
            formats: t.ArrayC<t.StringC>;
        }>]>;
        evalToString: t.IntersectionC<[t.TypeC<{
            supported: t.BooleanC;
        }>, t.PartialC<{
            requiresInstrumentedLaunch: t.BooleanC;
        }>]>;
    }>;
    settings: t.PartialC<{
        heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
            supported: t.BooleanC;
        }>, t.PartialC<{
            requiresInstrumentedLaunch: t.BooleanC;
        }>]>, t.PartialC<{
            formats: t.ArrayC<t.StringC>;
        }>]>;
        evalToString: t.IntersectionC<[t.TypeC<{
            supported: t.BooleanC;
        }>, t.PartialC<{
            requiresInstrumentedLaunch: t.BooleanC;
        }>]>;
    }>;
}>;
export declare const ApplicationHostCapabilities: t.PartialC<{
    install: t.PartialC<{
        sideloadStream: t.BooleanC;
        appBundle: t.BooleanC;
        companionBundle: t.BooleanC;
        appCompatibility: t.ArrayC<t.IntersectionC<[t.PartialC<{
            maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
            exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
        }>, t.TypeC<{
            family: t.StringC;
            version: t.StringC;
        }>]>>;
        companionCompatibility: t.IntersectionC<[t.TypeC<{
            maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
        }>, t.PartialC<{
            exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
        }>]>;
        partialBundle: t.BooleanC;
    }>;
    launch: t.PartialC<{
        appComponent: t.PartialC<{
            canLaunch: t.BooleanC;
        }>;
    }>;
    screenshot: t.IntersectionC<[t.PartialC<{
        stream: t.BooleanC;
    }>, t.TypeC<{
        imageFormats: t.ArrayC<t.StringC>;
    }>]>;
    debug: t.PartialC<{
        app: t.PartialC<{
            heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                supported: t.BooleanC;
            }>, t.PartialC<{
                requiresInstrumentedLaunch: t.BooleanC;
            }>]>, t.PartialC<{
                formats: t.ArrayC<t.StringC>;
            }>]>;
            evalToString: t.IntersectionC<[t.TypeC<{
                supported: t.BooleanC;
            }>, t.PartialC<{
                requiresInstrumentedLaunch: t.BooleanC;
            }>]>;
        }>;
        companion: t.PartialC<{
            heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                supported: t.BooleanC;
            }>, t.PartialC<{
                requiresInstrumentedLaunch: t.BooleanC;
            }>]>, t.PartialC<{
                formats: t.ArrayC<t.StringC>;
            }>]>;
            evalToString: t.IntersectionC<[t.TypeC<{
                supported: t.BooleanC;
            }>, t.PartialC<{
                requiresInstrumentedLaunch: t.BooleanC;
            }>]>;
        }>;
        settings: t.PartialC<{
            heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                supported: t.BooleanC;
            }>, t.PartialC<{
                requiresInstrumentedLaunch: t.BooleanC;
            }>]>, t.PartialC<{
                formats: t.ArrayC<t.StringC>;
            }>]>;
            evalToString: t.IntersectionC<[t.TypeC<{
                supported: t.BooleanC;
            }>, t.PartialC<{
                requiresInstrumentedLaunch: t.BooleanC;
            }>]>;
        }>;
    }>;
}>;
export declare type ApplicationHostCapabilities = t.TypeOf<typeof ApplicationHostCapabilities>;
export declare const HostCapabilities: t.PartialC<{
    protocol: t.PartialC<{
        batchRequest: t.BooleanC;
        maxMessageSize: t.RefinementC<t.RefinementC<t.NumberC>>;
        additionalSerializations: t.ArrayC<t.StringC>;
    }>;
    io: t.PartialC<{
        write: t.BooleanC;
        additionalEncodings: t.ArrayC<t.StringC>;
    }>;
    appHost: t.PartialC<{
        install: t.PartialC<{
            sideloadStream: t.BooleanC;
            appBundle: t.BooleanC;
            companionBundle: t.BooleanC;
            appCompatibility: t.ArrayC<t.IntersectionC<[t.PartialC<{
                maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
                exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
            }>, t.TypeC<{
                family: t.StringC;
                version: t.StringC;
            }>]>>;
            companionCompatibility: t.IntersectionC<[t.TypeC<{
                maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
            }>, t.PartialC<{
                exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
            }>]>;
            partialBundle: t.BooleanC;
        }>;
        launch: t.PartialC<{
            appComponent: t.PartialC<{
                canLaunch: t.BooleanC;
            }>;
        }>;
        screenshot: t.IntersectionC<[t.PartialC<{
            stream: t.BooleanC;
        }>, t.TypeC<{
            imageFormats: t.ArrayC<t.StringC>;
        }>]>;
        debug: t.PartialC<{
            app: t.PartialC<{
                heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                    supported: t.BooleanC;
                }>, t.PartialC<{
                    requiresInstrumentedLaunch: t.BooleanC;
                }>]>, t.PartialC<{
                    formats: t.ArrayC<t.StringC>;
                }>]>;
                evalToString: t.IntersectionC<[t.TypeC<{
                    supported: t.BooleanC;
                }>, t.PartialC<{
                    requiresInstrumentedLaunch: t.BooleanC;
                }>]>;
            }>;
            companion: t.PartialC<{
                heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                    supported: t.BooleanC;
                }>, t.PartialC<{
                    requiresInstrumentedLaunch: t.BooleanC;
                }>]>, t.PartialC<{
                    formats: t.ArrayC<t.StringC>;
                }>]>;
                evalToString: t.IntersectionC<[t.TypeC<{
                    supported: t.BooleanC;
                }>, t.PartialC<{
                    requiresInstrumentedLaunch: t.BooleanC;
                }>]>;
            }>;
            settings: t.PartialC<{
                heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                    supported: t.BooleanC;
                }>, t.PartialC<{
                    requiresInstrumentedLaunch: t.BooleanC;
                }>]>, t.PartialC<{
                    formats: t.ArrayC<t.StringC>;
                }>]>;
                evalToString: t.IntersectionC<[t.TypeC<{
                    supported: t.BooleanC;
                }>, t.PartialC<{
                    requiresInstrumentedLaunch: t.BooleanC;
                }>]>;
            }>;
        }>;
    }>;
    experimental: t.AnyC;
}>;
export declare type HostCapabilities = t.TypeOf<typeof HostCapabilities>;
export declare const InitializeResult: t.IntersectionC<[t.TypeC<{
    device: t.StringC;
    hostKind: t.UnionC<[t.LiteralC<"device">, t.LiteralC<"companion">]>;
    capabilities: t.PartialC<{
        protocol: t.PartialC<{
            batchRequest: t.BooleanC;
            maxMessageSize: t.RefinementC<t.RefinementC<t.NumberC>>;
            additionalSerializations: t.ArrayC<t.StringC>;
        }>;
        io: t.PartialC<{
            write: t.BooleanC;
            additionalEncodings: t.ArrayC<t.StringC>;
        }>;
        appHost: t.PartialC<{
            install: t.PartialC<{
                sideloadStream: t.BooleanC;
                appBundle: t.BooleanC;
                companionBundle: t.BooleanC;
                appCompatibility: t.ArrayC<t.IntersectionC<[t.PartialC<{
                    maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
                    exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
                }>, t.TypeC<{
                    family: t.StringC;
                    version: t.StringC;
                }>]>>;
                companionCompatibility: t.IntersectionC<[t.TypeC<{
                    maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
                }>, t.PartialC<{
                    exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
                }>]>;
                partialBundle: t.BooleanC;
            }>;
            launch: t.PartialC<{
                appComponent: t.PartialC<{
                    canLaunch: t.BooleanC;
                }>;
            }>;
            screenshot: t.IntersectionC<[t.PartialC<{
                stream: t.BooleanC;
            }>, t.TypeC<{
                imageFormats: t.ArrayC<t.StringC>;
            }>]>;
            debug: t.PartialC<{
                app: t.PartialC<{
                    heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                        supported: t.BooleanC;
                    }>, t.PartialC<{
                        requiresInstrumentedLaunch: t.BooleanC;
                    }>]>, t.PartialC<{
                        formats: t.ArrayC<t.StringC>;
                    }>]>;
                    evalToString: t.IntersectionC<[t.TypeC<{
                        supported: t.BooleanC;
                    }>, t.PartialC<{
                        requiresInstrumentedLaunch: t.BooleanC;
                    }>]>;
                }>;
                companion: t.PartialC<{
                    heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                        supported: t.BooleanC;
                    }>, t.PartialC<{
                        requiresInstrumentedLaunch: t.BooleanC;
                    }>]>, t.PartialC<{
                        formats: t.ArrayC<t.StringC>;
                    }>]>;
                    evalToString: t.IntersectionC<[t.TypeC<{
                        supported: t.BooleanC;
                    }>, t.PartialC<{
                        requiresInstrumentedLaunch: t.BooleanC;
                    }>]>;
                }>;
                settings: t.PartialC<{
                    heapSnapshot: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
                        supported: t.BooleanC;
                    }>, t.PartialC<{
                        requiresInstrumentedLaunch: t.BooleanC;
                    }>]>, t.PartialC<{
                        formats: t.ArrayC<t.StringC>;
                    }>]>;
                    evalToString: t.IntersectionC<[t.TypeC<{
                        supported: t.BooleanC;
                    }>, t.PartialC<{
                        requiresInstrumentedLaunch: t.BooleanC;
                    }>]>;
                }>;
            }>;
        }>;
        experimental: t.AnyC;
    }>;
}>, t.PartialC<{
    hostID: t.StringC;
}>]>;
export declare type InitializeResult = t.TypeOf<typeof InitializeResult>;
//# sourceMappingURL=Initialize.d.ts.map