import * as t from 'io-ts';
export declare const EvalToStringCapability: t.IntersectionC<[t.TypeC<{
    supported: t.BooleanC;
}>, t.PartialC<{
    requiresInstrumentedLaunch: t.BooleanC;
}>]>;
export declare type EvalToStringCapability = t.TypeOf<typeof EvalToStringCapability>;
export declare const AppDebugEvalParams: t.TypeC<{
    cmd: t.StringC;
}>;
export declare type AppDebugEvalParams = t.TypeOf<typeof AppDebugEvalParams>;
export declare const AppDebugEvalValueResult: t.TypeC<{
    success: t.LiteralC<true>;
    value: t.StringC;
}>;
export declare type AppDebugEvalValueResult = t.TypeOf<typeof AppDebugEvalValueResult>;
export declare const AppDebugEvalFailureResult: t.TypeC<{
    success: t.LiteralC<false>;
}>;
export declare type AppDebugEvalFailureResult = t.TypeOf<typeof AppDebugEvalFailureResult>;
export declare const AppDebugEvalResult: t.UnionC<[t.TypeC<{
    success: t.LiteralC<true>;
    value: t.StringC;
}>, t.TypeC<{
    success: t.LiteralC<false>;
}>]>;
export declare type AppDebugEvalResult = t.TypeOf<typeof AppDebugEvalResult>;
//# sourceMappingURL=Eval.d.ts.map