"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IOWriteParams = exports.NodeBuffer = exports.NodeBufferType = exports.IOEncoding = exports.StreamCloseParams = exports.StreamOpenResponse = exports.StreamToken = exports.IOCapabilities = void 0;
const t = require("io-ts");
exports.IOCapabilities = t.partial({
    write: t.boolean,
    additionalEncodings: t.array(t.string),
}, 'IOCapabilities');
exports.StreamToken = t.union([t.Integer, t.string], 'StreamToken');
exports.StreamOpenResponse = t.interface({
    stream: exports.StreamToken,
}, 'StreamOpenResponse');
exports.StreamCloseParams = t.interface({
    stream: exports.StreamToken,
}, 'StreamCloseParams');
exports.IOEncoding = t.union([
    t.literal('base64'),
    t.literal('none'),
]);
class NodeBufferType extends t.Type {
    constructor() {
        super('Buffer', (m) => Buffer.isBuffer(m), (m, c) => (this.is(m) ? t.success(m) : t.failure(m, c)), t.identity);
        this._tag = 'NodeBufferType';
    }
}
exports.NodeBufferType = NodeBufferType;
exports.NodeBuffer = new NodeBufferType();
exports.IOWriteParams = t.intersection([
    t.interface({
        stream: exports.StreamToken,
        data: t.union([
            t.string,
            exports.NodeBuffer,
        ]),
    }),
    t.partial({
        encoding: exports.IOEncoding,
    }),
], 'IOWriteParams');
//# sourceMappingURL=BulkData.js.map