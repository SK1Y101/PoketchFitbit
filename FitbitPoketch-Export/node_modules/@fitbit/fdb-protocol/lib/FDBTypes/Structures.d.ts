import * as t from 'io-ts';
export declare enum ErrorCodes {
    HostNotInitialized = -32001,
    MessageTooLong = -32002,
    ResponseTooLong = -32003,
    RequestError = -1
}
export declare const NonNegativeInteger: t.RefinementC<t.RefinementC<t.NumberC>>;
export declare const PositiveInteger: t.RefinementC<t.RefinementC<t.NumberC>>;
export declare const ObjectURI: t.StringC;
export declare type ObjectURI = t.TypeOf<typeof ObjectURI>;
export declare const AppFileURI: t.RefinementC<t.StringC>;
export declare type AppFileURI = t.TypeOf<typeof AppFileURI>;
export declare const Timestamp: t.NumberC;
export declare type Timestamp = t.TypeOf<typeof Timestamp>;
export declare const Semver: t.Type<string, string, unknown>;
export declare type Semver = t.TypeOf<typeof Semver>;
export declare const ReleaseSemver: t.RefinementC<t.Type<string, string, unknown>>;
export declare type ReleaseSemver = t.TypeOf<typeof ReleaseSemver>;
export declare const Position: t.IntersectionC<[t.TypeC<{
    source: t.RefinementC<t.StringC>;
    line: t.RefinementC<t.RefinementC<t.NumberC>>;
    column: t.RefinementC<t.RefinementC<t.NumberC>>;
}>, t.PartialC<{
    generated: t.BooleanC;
    name: t.StringC;
}>]>;
export declare type Position = t.TypeOf<typeof Position>;
export declare const UUID: t.RefinementC<t.StringC>;
export declare type UUID = t.TypeOf<typeof UUID>;
export declare const BuildID: t.RefinementC<t.StringC>;
export declare type BuildID = t.TypeOf<typeof BuildID>;
export declare const App: t.TypeC<{
    uuid: t.RefinementC<t.StringC>;
    buildID: t.RefinementC<t.StringC>;
}>;
export declare type App = t.TypeOf<typeof App>;
export declare const Component: t.UnionC<[t.LiteralC<"app">, t.LiteralC<"companion">, t.LiteralC<"settings">]>;
export declare type Component = t.TypeOf<typeof Component>;
export declare const AppComponent: t.IntersectionC<[t.TypeC<{
    uuid: t.RefinementC<t.StringC>;
    buildID: t.RefinementC<t.StringC>;
}>, t.TypeC<{
    component: t.UnionC<[t.LiteralC<"app">, t.LiteralC<"companion">, t.LiteralC<"settings">]>;
}>]>;
export declare type AppComponent = t.TypeOf<typeof AppComponent>;
export declare const DeviceHost: t.PartialC<{
    hostID: t.StringC;
}>;
export declare type DeviceHost = t.TypeOf<typeof DeviceHost>;
export declare const InstalledApp: t.UnionC<[t.TypeC<{
    uuid: t.RefinementC<t.StringC>;
    buildID: t.RefinementC<t.StringC>;
}>, t.PartialC<{
    hostID: t.StringC;
}>]>;
export declare type InstalledApp = t.TypeOf<typeof InstalledApp>;
export declare const InstalledAppComponent: t.UnionC<[t.IntersectionC<[t.TypeC<{
    uuid: t.RefinementC<t.StringC>;
    buildID: t.RefinementC<t.StringC>;
}>, t.TypeC<{
    component: t.UnionC<[t.LiteralC<"app">, t.LiteralC<"companion">, t.LiteralC<"settings">]>;
}>]>, t.PartialC<{
    hostID: t.StringC;
}>]>;
export declare type InstalledAppComponent = t.TypeOf<typeof InstalledAppComponent>;
export declare const ComponentBundleKind: t.UnionC<[t.LiteralC<"app">, t.LiteralC<"companion">]>;
export declare type ComponentBundleKind = t.TypeOf<typeof ComponentBundleKind>;
//# sourceMappingURL=Structures.d.ts.map