import * as t from 'io-ts';
export declare const ConsoleDebuggerCapabilities: t.PartialC<{
    appLogging: t.BooleanC;
}>;
export declare type ConsoleDebuggerCapabilities = t.TypeOf<typeof ConsoleDebuggerCapabilities>;
export declare const ConsoleMessageKind: t.UnionC<[t.LiteralC<"log">, t.LiteralC<"info">, t.LiteralC<"warn">, t.LiteralC<"error">]>;
export declare type ConsoleMessageKind = t.TypeOf<typeof ConsoleMessageKind>;
export declare const ConsoleMessage: t.IntersectionC<[t.PartialC<{
    timestamp: t.NumberC;
    position: t.IntersectionC<[t.TypeC<{
        source: t.RefinementC<t.StringC>;
        line: t.RefinementC<t.RefinementC<t.NumberC>>;
        column: t.RefinementC<t.RefinementC<t.NumberC>>;
    }>, t.PartialC<{
        generated: t.BooleanC;
        name: t.StringC;
    }>]>;
    fromHost: t.BooleanC;
}>, t.TypeC<{
    emittedBy: t.UnionC<[t.IntersectionC<[t.TypeC<{
        uuid: t.RefinementC<t.StringC>;
        buildID: t.RefinementC<t.StringC>;
    }>, t.TypeC<{
        component: t.UnionC<[t.LiteralC<"app">, t.LiteralC<"companion">, t.LiteralC<"settings">]>;
    }>]>, t.PartialC<{
        hostID: t.StringC;
    }>]>;
    kind: t.UnionC<[t.LiteralC<"log">, t.LiteralC<"info">, t.LiteralC<"warn">, t.LiteralC<"error">]>;
    message: t.ArrayC<t.AnyC>;
}>]>;
export declare type ConsoleMessage = t.TypeOf<typeof ConsoleMessage>;
export declare const TraceMessageKind: t.UnionC<[t.LiteralC<"trace">, t.LiteralC<"assert">, t.LiteralC<"exception">]>;
export declare type TraceMessageKind = t.TypeOf<typeof TraceMessageKind>;
export declare const TraceMessage: t.IntersectionC<[t.TypeC<{
    emittedBy: t.UnionC<[t.IntersectionC<[t.TypeC<{
        uuid: t.RefinementC<t.StringC>;
        buildID: t.RefinementC<t.StringC>;
    }>, t.TypeC<{
        component: t.UnionC<[t.LiteralC<"app">, t.LiteralC<"companion">, t.LiteralC<"settings">]>;
    }>]>, t.PartialC<{
        hostID: t.StringC;
    }>]>;
    stack: t.ArrayC<t.IntersectionC<[t.TypeC<{
        source: t.RefinementC<t.StringC>;
        line: t.RefinementC<t.RefinementC<t.NumberC>>;
        column: t.RefinementC<t.RefinementC<t.NumberC>>;
    }>, t.PartialC<{
        generated: t.BooleanC;
        name: t.StringC;
    }>]>>;
    kind: t.UnionC<[t.LiteralC<"trace">, t.LiteralC<"assert">, t.LiteralC<"exception">]>;
    message: t.ArrayC<t.AnyC>;
}>, t.PartialC<{
    timestamp: t.NumberC;
}>]>;
export declare type TraceMessage = t.TypeOf<typeof TraceMessage>;
//# sourceMappingURL=Console.d.ts.map