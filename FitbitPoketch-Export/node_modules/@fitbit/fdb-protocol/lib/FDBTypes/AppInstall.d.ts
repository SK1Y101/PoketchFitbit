import * as t from 'io-ts';
export declare const APICompatibilityDescriptor: t.IntersectionC<[t.TypeC<{
    maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
}>, t.PartialC<{
    exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
}>]>;
export declare type APICompatibilityDescriptor = t.TypeOf<typeof APICompatibilityDescriptor>;
export declare const AppHostDescriptor: t.IntersectionC<[t.PartialC<{
    maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
    exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
}>, t.TypeC<{
    family: t.StringC;
    version: t.StringC;
}>]>;
export declare type AppHostDescriptor = t.TypeOf<typeof AppHostDescriptor>;
export declare const CompanionHostDescriptor: t.IntersectionC<[t.TypeC<{
    maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
}>, t.PartialC<{
    exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
}>]>;
export declare type CompanionHostDescriptor = APICompatibilityDescriptor;
export declare const AppInstallCapabilities: t.PartialC<{
    sideloadStream: t.BooleanC;
    appBundle: t.BooleanC;
    companionBundle: t.BooleanC;
    appCompatibility: t.ArrayC<t.IntersectionC<[t.PartialC<{
        maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
        exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
    }>, t.TypeC<{
        family: t.StringC;
        version: t.StringC;
    }>]>>;
    companionCompatibility: t.IntersectionC<[t.TypeC<{
        maxAPIVersion: t.RefinementC<t.Type<string, string, unknown>>;
    }>, t.PartialC<{
        exactAPIVersion: t.ArrayC<t.Type<string, string, unknown>>;
    }>]>;
    partialBundle: t.BooleanC;
}>;
export declare type AppInstallCapabilities = t.TypeOf<typeof AppInstallCapabilities>;
export declare const AppInstallStreamBeginParams: t.TypeC<{
    componentBundle: t.UnionC<[t.LiteralC<"app">, t.LiteralC<"companion">]>;
}>;
export declare type AppInstallStreamBeginParams = t.TypeOf<typeof AppInstallStreamBeginParams>;
export declare const InstallType: t.KeyofC<{
    full: null;
    partial: null;
}>;
export declare type InstallType = t.TypeOf<typeof InstallType>;
export declare const AppInstallResult: t.IntersectionC<[t.TypeC<{
    app: t.TypeC<{
        uuid: t.RefinementC<t.StringC>;
        buildID: t.RefinementC<t.StringC>;
    }>;
    components: t.ArrayC<t.UnionC<[t.LiteralC<"app">, t.LiteralC<"companion">, t.LiteralC<"settings">]>>;
}>, t.PartialC<{
    installType: t.KeyofC<{
        full: null;
        partial: null;
    }>;
}>]>;
export declare type AppInstallResult = t.TypeOf<typeof AppInstallResult>;
//# sourceMappingURL=AppInstall.d.ts.map