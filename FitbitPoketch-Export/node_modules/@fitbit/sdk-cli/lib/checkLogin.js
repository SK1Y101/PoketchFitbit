"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const os_1 = tslib_1.__importDefault(require("os"));
const auth = tslib_1.__importStar(require("./auth"));
async function checkEnvVarLogin() {
    const username = process.env.FITBIT_SDK_USERNAME;
    const password = process.env.FITBIT_SDK_PASSWORD;
    if (!username && !password)
        return false;
    if (!username || !password) {
        console.error('Both FITBIT_SDK_USERNAME and FITBIT_SDK_PASSWORD must be set');
        process.exit(1);
    }
    try {
        await auth.loginResourceOwnerFlow(username, password);
    }
    catch (ex) {
        console.error(`Resource owner login failed: ${ex.message}`);
        process.exit(1);
    }
    return true;
}
async function checkStoredLogin() {
    let accessToken;
    try {
        accessToken = await auth.getAccessToken();
    }
    catch (ex) {
        console.error(`Failed to read auth token from keychain: ${ex}`);
        if (os_1.default.platform() === 'darwin') {
            console.error('Try locking and then unlocking your \'login\' keychain using the Keychain Access app.');
        }
        process.exit(1);
    }
    if (accessToken === null) {
        console.log('No login information, starting login...');
        try {
            await auth.loginAuthCodeFlow();
        }
        catch (ex) {
            console.error(`Login failed: ${ex.message}`);
            process.exit(1);
        }
    }
}
async function checkLogin() {
    if (!await checkEnvVarLogin()) {
        await checkStoredLogin();
    }
}
exports.default = checkLogin;
//# sourceMappingURL=checkLogin.js.map