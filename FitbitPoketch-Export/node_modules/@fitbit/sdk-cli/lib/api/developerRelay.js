"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hosts = exports.connect = exports.Host = void 0;
const tslib_1 = require("tslib");
const t = tslib_1.__importStar(require("io-ts"));
const websocket_stream_1 = tslib_1.__importDefault(require("websocket-stream"));
const baseAPI_1 = require("./baseAPI");
const fetchUtil_1 = require("../util/fetchUtil");
exports.Host = t.type({
    id: t.string,
    displayName: t.string,
    roles: t.array(t.string),
    state: t.union([
        t.literal('available'),
        t.literal('busy'),
    ]),
}, 'Host');
const HostsResponse = t.type({
    hosts: t.array(exports.Host),
}, 'HostsResponse');
async function getConnectionURL(hostID) {
    const response = await baseAPI_1.apiFetch(`1/user/-/developer-relay/hosts/${hostID}`, { method: 'POST' }).then(baseAPI_1.assertAPIResponseOK).then(fetchUtil_1.assertContentType('text/uri-list'));
    const uriList = (await response.text())
        .split('\r\n')
        .filter(line => line[0] !== '#');
    return uriList[0];
}
function createWebSocket(uri) {
    return new Promise((resolve, reject) => {
        const ws = websocket_stream_1.default(uri, { objectMode: true });
        ws.on('connect', () => resolve(ws));
        ws.on('error', e => reject(e));
    });
}
async function connect(hostID) {
    const url = await getConnectionURL(hostID);
    return createWebSocket(url);
}
exports.connect = connect;
async function hosts() {
    const response = await baseAPI_1.apiFetch('1/user/-/developer-relay/hosts.json')
        .then(baseAPI_1.decodeJSON(HostsResponse));
    const hostsWithRole = (role) => response.hosts.filter(host => host.roles.includes(role));
    return {
        appHost: hostsWithRole('APP_HOST'),
        companionHost: hostsWithRole('COMPANION_HOST'),
    };
}
exports.hosts = hosts;
//# sourceMappingURL=developerRelay.js.map