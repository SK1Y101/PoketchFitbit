"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAction = exports.buildProcess = void 0;
const tslib_1 = require("tslib");
const child_process_1 = tslib_1.__importDefault(require("child_process"));
const os_1 = tslib_1.__importDefault(require("os"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
exports.buildProcess = () => {
    return new Promise((resolve, reject) => {
        const buildProcess = child_process_1.default.spawn('npm', ['run-script', 'build'], { stdio: 'inherit', shell: true });
        buildProcess.on('exit', (code, signal) => resolve({ code, signal }));
        buildProcess.on('error', reject);
    });
};
exports.buildAction = async (cli) => {
    const packageJSONPath = 'package.json';
    const packageJSON = await fs_extra_1.default.readJSON(packageJSONPath);
    const buildScriptKey = 'scripts.build';
    if (!lodash_1.default.get(packageJSON, buildScriptKey)) {
        const { addBuildScript } = await cli.activeCommand.prompt({
            name: 'addBuildScript',
            type: 'confirm',
            message: 'No build script is configured, would you like to use the default?',
            default: false,
        });
        if (!addBuildScript) {
            cli.activeCommand.log('Cannot build, no build script available.');
            return false;
        }
        lodash_1.default.set(packageJSON, buildScriptKey, 'fitbit-build');
        await fs_extra_1.default.writeJSON(packageJSONPath, packageJSON, { spaces: 2, EOL: os_1.default.EOL });
    }
    return exports.buildProcess()
        .then(({ code, signal }) => {
        if (signal) {
            cli.activeCommand.log(`Build failed with signal: ${signal}`);
            return false;
        }
        if (code && code !== 0) {
            cli.activeCommand.log(`Build failed with code: ${code}`);
            return false;
        }
        return true;
    })
        .catch((error) => {
        cli.activeCommand.log(`Build failed with error: ${error}`);
        return false;
    });
};
function build(cli) {
    cli
        .command('build', 'Build application')
        .action(async () => exports.buildAction(cli));
}
exports.default = build;
//# sourceMappingURL=build.js.map