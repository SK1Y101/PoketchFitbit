"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAppPackageAction = exports.defaultAppPath = void 0;
const tslib_1 = require("tslib");
const untildify_1 = tslib_1.__importDefault(require("untildify"));
exports.defaultAppPath = './build/app.fba';
exports.setAppPackageAction = async (cli, appContext, packagePath) => {
    try {
        let loadPath = packagePath;
        if (!loadPath) {
            if (appContext.appPackagePath) {
                loadPath = appContext.appPackagePath;
                cli.activeCommand.log(`No app package specified. Reloading ${loadPath}.`);
            }
            else {
                loadPath = exports.defaultAppPath;
                cli.activeCommand.log(`No app package specified. Using default ${loadPath}.`);
            }
        }
        const appPackage = await appContext.loadAppPackage(untildify_1.default(loadPath));
        const { uuid, buildId } = appPackage;
        cli.activeCommand.log(`Loaded appID:${uuid} buildID:${buildId}`);
        return appPackage;
    }
    catch (ex) {
        cli.activeCommand.log(`Failed to load app package. ${ex}`);
    }
};
function setAppPackage(stores) {
    return (cli) => {
        cli
            .command('set-app-package [packagePath]', 'Set the current app package')
            .types({ string: ['packagePath'] })
            .hidden()
            .action(async (args) => exports.setAppPackageAction(cli, stores.appContext, args.packagePath));
    };
}
exports.default = setAppPackage;
//# sourceMappingURL=setAppPackage.js.map