"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const dateformat_1 = tslib_1.__importDefault(require("dateformat"));
const untildify_1 = tslib_1.__importDefault(require("untildify"));
const open_1 = tslib_1.__importDefault(require("open"));
const captureScreenshot_1 = tslib_1.__importDefault(require("../models/captureScreenshot"));
function screenshot(stores) {
    return (cli) => {
        cli.command('screenshot [path] [--open]', 'Capture a screenshot from the connected device')
            .types({ string: ['path'] })
            .option('-o, --open', 'Opens the screenshot using the native picture viewer')
            .action(async (args) => {
            const { appHost } = stores.hostConnections;
            if (!appHost) {
                cli.activeCommand.log('Not connected to a device');
                return false;
            }
            const destPath = path.resolve(args.path
                ? untildify_1.default(args.path)
                : dateformat_1.default('"Screenshot" yyyy-mm-dd "at" H.MM.ss."png"'));
            try {
                await captureScreenshot_1.default(appHost.host, destPath, {
                    onWrite(received, total) {
                        cli.ui.redraw(total == null
                            ? 'Downloading...'
                            : `Downloading: ${Math.round(received / total * 100)}% completed`);
                    },
                });
                cli.ui.redraw(`Screenshot saved to ${destPath}`);
                if (args.options.open) {
                    await open_1.default(destPath, { wait: false });
                }
                return true;
            }
            catch (ex) {
                cli.ui.redraw(String(ex));
                return false;
            }
            finally {
                cli.ui.redraw.done();
            }
        });
    };
}
exports.default = screenshot;
//# sourceMappingURL=screenshot.js.map