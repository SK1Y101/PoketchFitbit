"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.connectAction = void 0;
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const developerRelay = tslib_1.__importStar(require("../api/developerRelay"));
exports.connectAction = async (cli, deviceType, hostConnections) => {
    let hosts;
    try {
        hosts = await developerRelay.hosts();
    }
    catch (error) {
        cli.log(`An error was encountered when loading the list of available ${deviceType} hosts: ${error.message}`);
        return false;
    }
    const hostTypes = {
        device: 'appHost',
        phone: 'companionHost',
    };
    const hostType = hostTypes[deviceType];
    const matchedHosts = hosts[hostType].filter(host => host.state === 'available');
    if (matchedHosts.length === 0) {
        cli.activeCommand.log(`No ${deviceType}s are connected and available`);
        return false;
    }
    let host;
    if (matchedHosts.length === 1) {
        host = matchedHosts[0];
        cli.activeCommand.log(`Auto-connecting only known ${deviceType}: ${host.displayName}`);
    }
    else {
        host = (await cli.activeCommand.prompt({
            type: 'list',
            name: 'hostID',
            message: `Which ${deviceType} do you wish to sideload to?`,
            choices: matchedHosts.map(host => ({
                name: host.displayName,
                value: { id: host.id, displayName: host.displayName },
            })),
        })).hostID;
    }
    const connection = await hostConnections.connect(hostType, host.id);
    connection.ws.once('finish', () => cli.log(`${lodash_1.startCase(deviceType)} '${host.displayName}' disconnected`));
    return true;
};
function default_1(stores) {
    return (cli) => {
        const deviceTypes = ['device', 'phone'];
        for (const deviceType of deviceTypes) {
            cli
                .command(`connect ${deviceType}`, `Connect a ${deviceType}`)
                .action(async () => exports.connectAction(cli, deviceType, stores.hostConnections));
        }
    };
}
exports.default = default_1;
//# sourceMappingURL=connect.js.map