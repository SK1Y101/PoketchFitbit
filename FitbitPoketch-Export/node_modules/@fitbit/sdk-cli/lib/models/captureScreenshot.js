"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs"));
const portable_pixmap_1 = tslib_1.__importDefault(require("@fitbit/portable-pixmap"));
const pngjs_1 = require("pngjs");
const screenshotFormatPPM = 'P6.sRGB';
async function captureScreenshot(host, destPath, options = {}) {
    if (!host.canTakeScreenshot()) {
        throw new Error('Connected device does not support screenshots');
    }
    if (host.screenshotFormats().indexOf(screenshotFormatPPM) < 0) {
        throw new Error('No image format supported by the device is supported by the debugger');
    }
    const outStream = await new Promise((resolve, reject) => {
        const stream = fs.createWriteStream(destPath, { flags: 'wx' });
        stream
            .once('open', () => resolve(stream))
            .once('error', reject);
    });
    try {
        const pixmap = portable_pixmap_1.default.parse(await host.takeScreenshot(screenshotFormatPPM, options.onWrite));
        const png = new pngjs_1.PNG({
            width: pixmap.width,
            height: pixmap.height,
            colorType: 2,
        });
        pixmap.toRGBA8888(png.data);
        await new Promise((resolve, reject) => {
            png.pack()
                .once('error', error => outStream.destroy(error))
                .pipe(outStream)
                .once('error', reject)
                .once('close', resolve);
        });
    }
    catch (ex) {
        outStream.close();
        fs.unlinkSync(destPath);
        throw ex;
    }
}
exports.default = captureScreenshot;
//# sourceMappingURL=captureScreenshot.js.map