"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockHost = void 0;
const tslib_1 = require("tslib");
const jszip_1 = tslib_1.__importDefault(require("jszip"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const debuggerHost_1 = require("./debuggerHost");
function makeInstallCapabilities(hostType, hostProperties) {
    const { maxAPIVersion } = hostProperties;
    const capabilities = {
        app: {
            appBundle: true,
            appCompatibility: [
                {
                    maxAPIVersion,
                    family: 'Higgs',
                    version: '277.255.1.999',
                },
            ],
        },
        companion: Object.assign({ companionBundle: true }, (maxAPIVersion && { companionCompatibility: { maxAPIVersion } })),
    };
    return capabilities[hostType];
}
async function getBundleInfo(bundleData) {
    const bundleZip = await jszip_1.default.loadAsync(bundleData);
    const manifestFile = bundleZip.file('manifest.json');
    if (manifestFile === null)
        throw new Error('manifest.json is missing from bundle');
    const manifestStr = await manifestFile.async('text');
    const manifest = JSON.parse(manifestStr);
    return {
        uuid: manifest.uuid,
        buildID: manifest.buildId.slice(2),
    };
}
async function createMockHost(hostType, hostProperties, handleLog) {
    const hostDescriptor = {
        id: `mock_${hostType}`,
        displayName: `Mock ${lodash_1.default.startCase(hostType)} Host`,
        capabilities: {
            install: makeInstallCapabilities(hostType, hostProperties),
        },
    };
    const { closePromise, host, close } = await debuggerHost_1.createDebuggerHost(hostDescriptor, handleLog);
    host.setInstallHandler(async (bundleData) => {
        const bundleInfo = await getBundleInfo(bundleData);
        handleLog(`Sideload received with appID:${bundleInfo.uuid} buildID:${bundleInfo.buildID}`);
        return {
            app: bundleInfo,
            components: [hostType],
        };
    }, hostDescriptor.capabilities.install);
    return { closePromise, close };
}
exports.createMockHost = createMockHost;
//# sourceMappingURL=mockHost.js.map