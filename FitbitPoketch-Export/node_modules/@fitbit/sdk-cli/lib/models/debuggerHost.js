"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDebuggerHost = void 0;
const tslib_1 = require("tslib");
const fdb_host_1 = require("@fitbit/fdb-host");
const ws_1 = tslib_1.__importDefault(require("ws"));
const websocket_stream_1 = tslib_1.__importDefault(require("websocket-stream"));
const auth = tslib_1.__importStar(require("../auth"));
const environment_1 = tslib_1.__importDefault(require("../auth/environment"));
function eventPromise(socket, eventName) {
    return new Promise(resolve => socket.once(eventName, resolve));
}
async function createHostConnection({ id, displayName, capabilities }) {
    const roles = [];
    if (capabilities.install) {
        if (capabilities.install.appBundle)
            roles.push('APP_HOST');
        if (capabilities.install.companionBundle)
            roles.push('COMPANION_HOST');
    }
    const authToken = await auth.getAccessToken();
    return new ws_1.default(environment_1.default().config.devRelayUrl, {
        headers: {
            Authorization: `Bearer ${authToken}`,
            'X-Relay-Host-Roles': roles.join(','),
            'X-Relay-Host-ID': id,
            'X-Relay-Host-Display-Name': displayName,
        },
    });
}
async function createDebuggerHost(hostDescriptor, handleLog) {
    const socket = await createHostConnection(hostDescriptor);
    handleLog('Connected to developer relay, waiting for debugger');
    const initMessageBuffer = await eventPromise(socket, 'message');
    const initMessage = JSON.parse(initMessageBuffer.toString());
    handleLog('Debugger connected');
    const host = fdb_host_1.Host.create(websocket_stream_1.default(socket, {
        binary: false,
        objectMode: true,
    }), {
        maxMessageSize: initMessage.maxMessageSize,
        device: hostDescriptor.displayName,
        hostKind: 'device',
    });
    const closePromise = eventPromise(socket, 'close').then(() => {
        handleLog('Debugger or relay closed connection');
    });
    return {
        closePromise,
        host,
        close: () => socket.close(),
    };
}
exports.createDebuggerHost = createDebuggerHost;
//# sourceMappingURL=debuggerHost.js.map