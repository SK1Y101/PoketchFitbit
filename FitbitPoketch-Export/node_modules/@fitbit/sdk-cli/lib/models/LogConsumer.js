"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const source_map_1 = require("source-map");
const compatibility = tslib_1.__importStar(require("../models/compatibility"));
const mapValues_1 = tslib_1.__importDefault(require("../util/mapValues"));
const sourceMapUtil_1 = require("../util/sourceMapUtil");
class LogConsumer {
    constructor({ appContext, hostConnections, messageFormatter, }) {
        this.componentSourceMapConsumers = {};
        this.registerHost = ({ hostType, host }) => {
            const currentHost = this[hostType];
            if (currentHost) {
                currentHost.removeListener('consoleMessage', this.handleLog);
                currentHost.removeListener('consoleTrace', this.handleTrace);
            }
            this[hostType] = host;
            host.on('consoleMessage', this.handleLog);
            host.on('consoleTrace', this.handleTrace);
            return this.registerSourceMaps();
        };
        this.registerSourceMaps = async () => {
            if (!this.appContext.appPackage || !this.appContext.appPackage.sourceMaps)
                return;
            const sourceMaps = {
                companion: this.appContext.appPackage.sourceMaps.companion,
                settings: this.appContext.appPackage.sourceMaps.settings,
            };
            if (this.appHost && this.appContext.appPackage.sourceMaps.device) {
                try {
                    const family = compatibility.findCompatibleAppComponent(this.appContext.appPackage, this.appHost.info);
                    sourceMaps.app = this.appContext.appPackage.sourceMaps.device[family];
                }
                catch (_a) { }
            }
            const sourceMapConsumers = await mapValues_1.default(lodash_1.default(sourceMaps).pickBy().value(), async (maps) => mapValues_1.default(maps, async (map) => new source_map_1.SourceMapConsumer(map)));
            this.componentSourceMapConsumers = Object.assign(Object.assign({}, this.componentSourceMapConsumers), sourceMapConsumers);
        };
        this.handleLog = (message) => {
            this.messageFormatter(sourceMapUtil_1.sourceMapMessage(message, this.componentSourceMapConsumers));
        };
        this.handleTrace = (message) => {
            this.messageFormatter(sourceMapUtil_1.sourceMapMessage(message, this.componentSourceMapConsumers));
        };
        this.appContext = appContext;
        this.appContext.onAppPackageLoad.attach(this.registerSourceMaps);
        this.hostConnections = hostConnections;
        this.hostConnections.onHostAdded.attach(this.registerHost);
        this.messageFormatter = messageFormatter;
    }
}
exports.default = LogConsumer;
//# sourceMappingURL=LogConsumer.js.map