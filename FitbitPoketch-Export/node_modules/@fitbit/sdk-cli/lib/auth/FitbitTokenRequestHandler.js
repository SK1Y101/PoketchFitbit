"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const errors_1 = require("@openid/appauth/built/errors");
const token_response_1 = require("@openid/appauth/built/token_response");
const query_string_utils_1 = require("@openid/appauth/built/query_string_utils");
const t = tslib_1.__importStar(require("io-ts"));
const fetch_1 = tslib_1.__importDefault(require("../fetch"));
const FitbitAuthErrorResponse = t.interface({
    errors: t.array(t.interface({
        errorType: t.string,
        message: t.string,
    })),
    success: t.boolean,
});
const FitbitTokenResponse = t.interface({
    access_token: t.string,
    refresh_token: t.string,
    expires_in: t.number,
    token_type: t.union([
        t.literal('bearer'),
        t.literal('mac'),
        t.undefined,
    ]),
});
const commonParams = {
    method: 'POST',
    headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
    },
};
class FitbitTokenRequestHandler {
    constructor() {
        this.utils = new query_string_utils_1.BasicQueryStringUtils();
    }
    performRevokeTokenRequest(configuration, request) {
        return fetch_1.default(configuration.revocationEndpoint, Object.assign(Object.assign({}, commonParams), { body: this.utils.stringify({
                token: request.token,
            }) })).then(response => response.ok);
    }
    async performTokenRequest(configuration, request) {
        const response = await fetch_1.default(configuration.tokenEndpoint, Object.assign(Object.assign({}, commonParams), { body: this.utils.stringify(request.toStringMap()) }));
        const responseJson = await response.json();
        if (responseJson.token_type)
            responseJson.token_type = responseJson.token_type.toLowerCase();
        if (response.status === 200 && FitbitTokenResponse.is(responseJson)) {
            return new token_response_1.TokenResponse(Object.assign(Object.assign({}, responseJson), { expires_in: String(responseJson.expires_in) }));
        }
        if (FitbitAuthErrorResponse.is(responseJson)) {
            const error = responseJson.errors[0];
            throw new errors_1.AppAuthError(error.errorType, new token_response_1.TokenError({
                error: error.errorType,
                error_description: error.message,
            }));
        }
        throw new errors_1.AppAuthError(`Unexpected response format for status ${response.status}: ${JSON.stringify(responseJson)}`);
    }
}
exports.default = FitbitTokenRequestHandler;
//# sourceMappingURL=FitbitTokenRequestHandler.js.map