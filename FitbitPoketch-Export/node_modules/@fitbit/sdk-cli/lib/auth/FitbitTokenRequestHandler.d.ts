import { AuthorizationServiceConfiguration } from '@openid/appauth/built/authorization_service_configuration';
import { RevokeTokenRequest } from '@openid/appauth/built/revoke_token_request';
import { TokenResponse } from '@openid/appauth/built/token_response';
import { TokenRequestHandler } from '@openid/appauth/built/token_request_handler';
import { BasicQueryStringUtils } from '@openid/appauth/built/query_string_utils';
import * as t from 'io-ts';
declare const FitbitTokenResponse: t.TypeC<{
    access_token: t.StringC;
    refresh_token: t.StringC;
    expires_in: t.NumberC;
    token_type: t.UnionC<[t.LiteralC<"bearer">, t.LiteralC<"mac">, t.UndefinedC]>;
}>;
export declare type FitbitTokenResponse = t.TypeOf<typeof FitbitTokenResponse>;
export default class FitbitTokenRequestHandler implements TokenRequestHandler {
    readonly utils: BasicQueryStringUtils;
    performRevokeTokenRequest(configuration: AuthorizationServiceConfiguration, request: RevokeTokenRequest): Promise<boolean>;
    performTokenRequest(configuration: AuthorizationServiceConfiguration, request: {
        toStringMap: () => Record<string, string>;
    }): Promise<TokenResponse>;
}
export {};
//# sourceMappingURL=FitbitTokenRequestHandler.d.ts.map