"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const humanize_list_1 = tslib_1.__importDefault(require("humanize-list"));
const BuildError_1 = tslib_1.__importDefault(require("./util/BuildError"));
const diagnostics_1 = require("./diagnostics");
function findEntryPoint(possibilities, options) {
    const { onDiagnostic, notFoundIsFatal, component } = Object.assign({ notFoundIsFatal: true }, options);
    const foundEntryPoints = possibilities.filter((path) => fs_1.default.existsSync(path));
    let entryPoint;
    if (foundEntryPoints.length === 1)
        entryPoint = foundEntryPoints[0];
    else if (foundEntryPoints.length === 0) {
        const possibilitiesStr = humanize_list_1.default(possibilities, { conjunction: 'or' });
        if (notFoundIsFatal) {
            throw new BuildError_1.default(`No ${component} entry point found! None of ${possibilitiesStr} are present in the project.`);
        }
        else {
            onDiagnostic({
                category: diagnostics_1.DiagnosticCategory.Warning,
                messageText: `This project is being built without a ${component} component. Create a file named ${possibilitiesStr} to add a ${component} component to your project.`,
            });
        }
    }
    else if (foundEntryPoints.length > 1) {
        throw new BuildError_1.default(`Multiple ${component} entry points found! ${humanize_list_1.default(foundEntryPoints)} are all valid entry points; rename all but one and try again.`);
    }
    return entryPoint;
}
exports.default = findEntryPoint;
