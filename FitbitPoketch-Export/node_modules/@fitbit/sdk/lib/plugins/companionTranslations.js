"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = require("path");
const util_1 = require("util");
const glob_1 = tslib_1.__importDefault(require("glob"));
const humanize_list_1 = tslib_1.__importDefault(require("humanize-list"));
const pofile_1 = tslib_1.__importDefault(require("pofile"));
const pluginutils_1 = require("@rollup/pluginutils");
const BuildError_1 = tslib_1.__importDefault(require("../util/BuildError"));
const languageTag_1 = require("../languageTag");
const ProjectConfiguration_1 = require("../ProjectConfiguration");
const glob = util_1.promisify(glob_1.default);
const loadPOFile = util_1.promisify(pofile_1.default.load);
async function loadTranslations(filePath) {
    const po = await loadPOFile(filePath);
    const messages = {};
    for (const { msgid, msgstr } of po.items) {
        if (msgstr.length > 1) {
            throw new BuildError_1.default(`msgid "${msgid}" in file "${filePath}" has multiple msgstr values. This is not supported.`);
        }
        messages[msgid] = msgstr[0];
    }
    return messages;
}
function companionTranslations(globPattern, defaultLanguage) {
    return async () => {
        const languagePaths = new Map();
        const translations = {};
        for (const filePath of await glob(globPattern)) {
            const languageTag = path_1.basename(filePath, '.po');
            if (!languageTag_1.validateLanguageTag(languageTag)) {
                throw new BuildError_1.default(`Translation file "${filePath}" has a bad name. Translation files must be named ${humanize_list_1.default(Object.keys(ProjectConfiguration_1.Locales).map((tag) => tag + '.po'), { conjunction: 'or' })}.`);
            }
            const existingTranslations = languagePaths.get(languageTag);
            if (existingTranslations) {
                throw new BuildError_1.default(`More than one translation file found for language ${languageTag}. Found "${existingTranslations}" and "${filePath}".`);
            }
            languagePaths.set(languageTag, filePath);
            translations[languageTag] = await loadTranslations(filePath);
        }
        if (!translations.hasOwnProperty(defaultLanguage)) {
            throw new BuildError_1.default(`No translation file found for default language "${defaultLanguage}"`);
        }
        return pluginutils_1.dataToEsm(translations, { namedExports: false });
    };
}
exports.default = companionTranslations;
