"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseTsConfig = void 0;
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const defaultTSConfig_const_1 = tslib_1.__importDefault(require("./defaultTSConfig.const"));
function loadTsConfig(configPath, onDiagnostics) {
    if (configPath === undefined) {
        return {
            loadedConfig: defaultTSConfig_const_1.default,
            configFileName: 'tsconfig.json',
            baseDir: process.cwd(),
        };
    }
    const result = typescript_1.default.readConfigFile(configPath, typescript_1.default.sys.readFile);
    if (result.error !== undefined) {
        if (onDiagnostics)
            onDiagnostics([result.error]);
        throw new Error(`Failed to parse ${configPath}`);
    }
    return {
        loadedConfig: result.config,
        configFileName: configPath,
        baseDir: path_1.default.dirname(configPath),
    };
}
function parseTsConfig(tsConfig, tsconfigOverride, onDiagnostics, searchPath = process.cwd()) {
    const fileName = typescript_1.default.findConfigFile(path_1.default.resolve(searchPath), typescript_1.default.sys.fileExists, tsConfig);
    if (tsConfig !== undefined && !fileName) {
        throw new Error(`Failed to open ${fileName}`);
    }
    const { loadedConfig, configFileName, baseDir } = loadTsConfig(fileName, onDiagnostics);
    const result = typescript_1.default.parseJsonConfigFileContent(loadedConfig, typescript_1.default.sys, baseDir, tsconfigOverride, configFileName);
    if (result.errors.length > 0) {
        if (onDiagnostics)
            onDiagnostics(result.errors);
        throw new Error('Failed to parse tsconfig');
    }
    return result;
}
exports.parseTsConfig = parseTsConfig;
