"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const pathUtils_1 = require("../../pathUtils");
class LanguageServiceHost {
    constructor(parsedConfig) {
        this.parsedConfig = parsedConfig;
        this.cwd = process.cwd();
        this.snapshots = {};
        this.versions = {};
        this.fileNames = new Set(parsedConfig.fileNames);
    }
    setSnapshot(fileName, data) {
        const normalizedFileName = pathUtils_1.normalizeToPOSIX(fileName);
        const snapshot = typescript_1.default.ScriptSnapshot.fromString(data);
        this.snapshots[normalizedFileName] = snapshot;
        this.versions[normalizedFileName] =
            (this.versions[normalizedFileName] || 0) + 1;
        this.fileNames.add(normalizedFileName);
        return snapshot;
    }
    getScriptSnapshot(fileName) {
        const normalizedFileName = pathUtils_1.normalizeToPOSIX(fileName);
        if (lodash_1.default.has(this.snapshots, normalizedFileName)) {
            return this.snapshots[normalizedFileName];
        }
        if (typescript_1.default.sys.fileExists(normalizedFileName)) {
            this.snapshots[normalizedFileName] = typescript_1.default.ScriptSnapshot.fromString(typescript_1.default.sys.readFile(normalizedFileName));
            this.versions[normalizedFileName] =
                (this.versions[normalizedFileName] || 0) + 1;
            return this.snapshots[normalizedFileName];
        }
        return undefined;
    }
    getCurrentDirectory() {
        return this.cwd;
    }
    getScriptVersion(fileName) {
        const normalizedFileName = pathUtils_1.normalizeToPOSIX(fileName);
        return (this.versions[normalizedFileName] || 0).toString();
    }
    getScriptFileNames() {
        return Array.from(this.fileNames.values());
    }
    getCompilationSettings() {
        return this.parsedConfig.options;
    }
    getDefaultLibFileName(opts) {
        if (__dirname.length === 1) {
            return '/_typescript/' + typescript_1.default.getDefaultLibFileName(opts);
        }
        return typescript_1.default.getDefaultLibFilePath(opts);
    }
    useCaseSensitiveFileNames() {
        return typescript_1.default.sys.useCaseSensitiveFileNames;
    }
    readDirectory(path, extensions, exclude, include) {
        return typescript_1.default.sys.readDirectory(path, extensions, exclude, include);
    }
    readFile(path, encoding) {
        return typescript_1.default.sys.readFile(path, encoding);
    }
    fileExists(path) {
        return typescript_1.default.sys.fileExists(path);
    }
    getTypeRootsVersion() {
        return 0;
    }
    directoryExists(directoryName) {
        return typescript_1.default.sys.directoryExists(directoryName);
    }
    getDirectories(directoryName) {
        return typescript_1.default.sys.getDirectories(directoryName);
    }
}
exports.default = LanguageServiceHost;
