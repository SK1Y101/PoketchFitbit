"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isPluginError = void 0;
const tslib_1 = require("tslib");
const diagnostics_1 = require("../diagnostics");
const indentString_1 = tslib_1.__importDefault(require("./indentString"));
function isPluginError(value) {
    if (!(value instanceof Error))
        return false;
    const { showStack, plugin, toString } = value;
    return (typeof showStack === 'boolean' &&
        typeof plugin === 'string' &&
        toString !== Error.prototype.toString);
}
exports.isPluginError = isPluginError;
function isProjectBuildError(error) {
    return !error.showStack;
}
function hasEnumerableProp(obj, prop) {
    return obj.propertyIsEnumerable(prop) && obj[prop] !== undefined;
}
const ignoredPluginErrorProps = new Set([
    '__safety',
    '_stack',
    'columnNumber',
    'fileName',
    'lineNumber',
    'message',
    'name',
    'plugin',
    'showProperties',
    'showStack',
    'stack',
    'target',
]);
function hasDiagnosticTarget(err) {
    return Object.values(diagnostics_1.DiagnosticTarget).indexOf(err.target) !== -1;
}
function convertToDiagnostic(error) {
    const diagnostic = {
        category: diagnostics_1.DiagnosticCategory.Error,
        messageText: `${error.name}: ${error.message}`,
    };
    if (hasDiagnosticTarget(error)) {
        diagnostic.target = error.target;
    }
    if (error.showProperties) {
        const detailKeys = Object.keys(error).filter((key) => !ignoredPluginErrorProps.has(key));
        if (detailKeys.length) {
            const detailsText = detailKeys
                .map((key) => {
                const value = error[key];
                if (typeof value === 'string' && value.includes('\n')) {
                    return `    ${key}:\n${indentString_1.default(value, 6)}\n`;
                }
                return `    ${key}: ${value}\n`;
            })
                .join('');
            diagnostic.messageText = [
                {
                    category: diagnostics_1.DiagnosticCategory.Error,
                    messageText: diagnostic.messageText,
                },
                {
                    category: diagnostics_1.DiagnosticCategory.Message,
                    messageText: 'Details:\n' + detailsText,
                },
            ];
        }
    }
    if (hasEnumerableProp(error, 'fileName')) {
        diagnostic.file = {
            path: error.fileName,
        };
        if (hasEnumerableProp(error, 'lineNumber')) {
            diagnostic.file.position = {
                start: {
                    line: error.lineNumber - 1,
                    character: hasEnumerableProp(error, 'columnNumber')
                        ? error.columnNumber - 1
                        : undefined,
                },
            };
        }
    }
    return diagnostic;
}
const pluginError = {
    convertToDiagnostic,
    isPluginError,
    isProjectBuildError,
};
exports.default = pluginError;
