"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const stream_1 = tslib_1.__importDefault(require("stream"));
const plugin_error_1 = tslib_1.__importDefault(require("plugin-error"));
const pngjs_1 = require("@fitbit/pngjs");
const diagnostics_1 = require("./diagnostics");
const ProjectConfiguration_1 = require("./ProjectConfiguration");
const EXPECTED_ICON_HEIGHT = 80;
const EXPECTED_ICON_WIDTH = 80;
const PLUGIN_NAME = 'validateIcon';
function getPNGDimensions(buffer) {
    return new Promise((resolve, reject) => {
        const png = new pngjs_1.PNG();
        png.on('metadata', (metadata) => {
            png.on('parsed', (parsed) => resolve({
                width: png.width,
                height: png.height,
            }));
        });
        png.on('error', reject);
        png.parse(buffer);
    });
}
function validateIcon({ projectConfig, onDiagnostic, }) {
    if (projectConfig.appType !== ProjectConfiguration_1.AppType.APP) {
        return new stream_1.default.PassThrough({ objectMode: true });
    }
    let iconExists = false;
    return new stream_1.default.Transform({
        objectMode: true,
        transform(file, _, cb) {
            if (file.isNull() ||
                file.relative !== path_1.default.normalize(projectConfig.iconFile)) {
                return cb(undefined, file);
            }
            iconExists = true;
            if (file.isBuffer()) {
                getPNGDimensions(file.contents)
                    .then((metadata) => {
                    const iconHeight = metadata.height;
                    const iconWidth = metadata.width;
                    if (iconWidth !== EXPECTED_ICON_WIDTH ||
                        iconHeight !== EXPECTED_ICON_HEIGHT) {
                        const errorMessage = `Icon was of invalid size, expected ${EXPECTED_ICON_WIDTH}x${EXPECTED_ICON_HEIGHT}, got ${iconWidth}x${iconHeight}`;
                        return cb(new plugin_error_1.default(PLUGIN_NAME, errorMessage, {
                            fileName: file.relative,
                        }));
                    }
                    cb(undefined, file);
                })
                    .catch((err) => cb(new plugin_error_1.default(PLUGIN_NAME, err, { fileName: file.relative })));
            }
            else {
                cb(new plugin_error_1.default(PLUGIN_NAME, 'Icon file is not a buffer', {
                    fileName: file.relative,
                }));
            }
        },
        flush(cb) {
            if (!iconExists) {
                onDiagnostic({
                    category: diagnostics_1.DiagnosticCategory.Warning,
                    messageText: `There is no app icon present in this project. To set an app icon, add a ${EXPECTED_ICON_WIDTH}x${EXPECTED_ICON_HEIGHT} PNG file named ${projectConfig.iconFile} to your project.`,
                });
            }
            cb();
        },
    });
}
exports.default = validateIcon;
