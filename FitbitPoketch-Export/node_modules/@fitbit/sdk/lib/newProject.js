"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const os_1 = tslib_1.__importDefault(require("os"));
const path_1 = tslib_1.__importDefault(require("path"));
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const uuid = tslib_1.__importStar(require("uuid"));
const buildTargets_1 = tslib_1.__importDefault(require("./buildTargets"));
const ProjectConfiguration_1 = require("./ProjectConfiguration");
const sdkVersion_1 = tslib_1.__importDefault(require("./sdkVersion"));
function scaffoldDirectory(scaffold, sourceScaffoldOverride = scaffold) {
    const scaffoldPath = path_1.default.join(__dirname, '..', 'scaffold', sourceScaffoldOverride);
    fs_extra_1.default.copySync(scaffoldPath, scaffold);
}
async function newProject() {
    const packageJSONPath = 'package.json';
    const packageJSON = fs_extra_1.default.readJSONSync(packageJSONPath);
    const config = ProjectConfiguration_1.normalizeProjectConfig(packageJSON);
    const packageName = packageJSON.name;
    const defaultDisplayName = typeof packageName === 'string' ? lodash_1.default.startCase(packageName) : undefined;
    const { appType, appDisplayName, withCompanion, withSettings, enabledBuildTargets, } = await inquirer_1.default.prompt([
        {
            name: 'appType',
            type: 'list',
            choices: Object.values(ProjectConfiguration_1.AppType).filter((appType) => appType !== ProjectConfiguration_1.AppType.SERVICE),
            message: 'What type of application should be created?',
        },
        {
            name: 'appDisplayName',
            message: 'What should the name of this application be?',
            default: defaultDisplayName,
            validate: ProjectConfiguration_1.validateDisplayName,
        },
        {
            name: 'withCompanion',
            type: 'confirm',
            message: 'Should this application contain a companion component?',
        },
        {
            name: 'withSettings',
            type: 'confirm',
            when: (args) => args.withCompanion,
            message: 'Should this application contain a settings component?',
        },
        {
            name: 'enabledBuildTargets',
            type: 'checkbox',
            choices: Object.keys(buildTargets_1.default).map((platform) => ({
                name: buildTargets_1.default[platform].displayName,
                value: platform,
            })),
            default: Object.keys(buildTargets_1.default),
            message: 'Which platforms should this application be built for?',
        },
    ]);
    console.log('Creating device component');
    scaffoldDirectory('app');
    scaffoldDirectory('resources', sdkVersion_1.default().major < 5 ? 'resources_4.x' : undefined);
    scaffoldDirectory('tsconfig.json');
    if (withCompanion) {
        console.log('Creating companion component');
        scaffoldDirectory('companion');
    }
    if (withSettings) {
        console.log('Creating settings component');
        scaffoldDirectory('settings');
    }
    packageJSON.fitbit = Object.assign(Object.assign({}, config), { appType,
        appDisplayName, appUUID: uuid.v4(), buildTargets: enabledBuildTargets, wipeColor: '#ffffff' });
    packageJSON.scripts = {
        build: 'fitbit-build',
        debug: 'fitbit',
    };
    fs_extra_1.default.writeJSONSync(packageJSONPath, packageJSON, {
        spaces: 2,
        EOL: os_1.default.EOL,
    });
}
exports.default = newProject;
