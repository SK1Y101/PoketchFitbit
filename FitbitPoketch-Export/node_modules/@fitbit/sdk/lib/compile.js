"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path_1 = tslib_1.__importDefault(require("path"));
const plugin_babel_1 = tslib_1.__importDefault(require("@rollup/plugin-babel"));
const plugin_commonjs_1 = tslib_1.__importDefault(require("@rollup/plugin-commonjs"));
const plugin_node_resolve_1 = tslib_1.__importDefault(require("@rollup/plugin-node-resolve"));
const typescript_1 = tslib_1.__importDefault(require("typescript"));
const semver_1 = tslib_1.__importDefault(require("semver"));
const componentTargets_1 = tslib_1.__importStar(require("./componentTargets"));
const diagnostics_1 = require("./diagnostics");
const rollupToVinyl_1 = tslib_1.__importDefault(require("./rollupToVinyl"));
const forbidAbsoluteImport_1 = tslib_1.__importDefault(require("./plugins/forbidAbsoluteImport"));
const i18nPolyfill_1 = tslib_1.__importDefault(require("./plugins/i18nPolyfill"));
const platformExternals = tslib_1.__importStar(require("./plugins/platformExternals"));
const polyfill_1 = tslib_1.__importDefault(require("./plugins/polyfill"));
const resourceImports_1 = tslib_1.__importDefault(require("./plugins/resourceImports"));
const workaroundRequireScope_1 = tslib_1.__importDefault(require("./plugins/workaroundRequireScope"));
const terser_1 = tslib_1.__importDefault(require("./plugins/terser"));
const typescript_2 = tslib_1.__importDefault(require("./plugins/typescript"));
const rollupWarningHandler_1 = tslib_1.__importDefault(require("./rollupWarningHandler"));
const sdkVersion_1 = tslib_1.__importDefault(require("./sdkVersion"));
const weatherPolyfill_1 = tslib_1.__importDefault(require("./plugins/weatherPolyfill"));
const tsconfigOverrides = {
    noEmitHelpers: false,
    importHelpers: true,
    noResolve: false,
    noEmit: false,
    inlineSourceMap: false,
    moduleResolution: typescript_1.default.ModuleResolutionKind.NodeJs,
    module: typescript_1.default.ModuleKind.ESNext,
    suppressOutputPathCheck: true,
};
function pluginIf(condition, plugin) {
    return condition ? [plugin()] : [];
}
const deviceModulesWithoutDefaultExports = new Set([
    'crypto',
    'document',
    'fs',
    'jpeg',
    'power',
    'scientific',
    'scientific/signal',
    'system',
    'user-activity',
    'user-settings',
]);
function compile({ component, entryPoint, outputDir, defaultLanguage, allowUnknownExternals = false, onDiagnostic = diagnostics_1.logDiagnosticToConsole, }) {
    const ecma = component !== componentTargets_1.ComponentType.DEVICE ? 6 : 5;
    const { translationsGlob } = componentTargets_1.default[component];
    return rollupToVinyl_1.default({
        input: entryPoint,
        plugins: [
            ...pluginIf(component !== componentTargets_1.ComponentType.DEVICE, () => polyfill_1.default(i18nPolyfill_1.default(translationsGlob, defaultLanguage))),
            ...pluginIf(component === componentTargets_1.ComponentType.COMPANION &&
                semver_1.default.satisfies(sdkVersion_1.default(), '~4.3.0'), () => polyfill_1.default(weatherPolyfill_1.default)),
            platformExternals.plugin(component),
            typescript_2.default({
                onDiagnostic,
                tsconfigOverride: Object.assign(Object.assign({}, tsconfigOverrides), { target: ecma === 6 ? typescript_1.default.ScriptTarget.ES2015 : typescript_1.default.ScriptTarget.ES5 }),
                tsconfigSearchPath: path_1.default.dirname(entryPoint),
            }),
            ...pluginIf(component === componentTargets_1.ComponentType.SETTINGS, resourceImports_1.default),
            forbidAbsoluteImport_1.default(),
            plugin_node_resolve_1.default({ preferBuiltins: false }),
            plugin_commonjs_1.default({ include: ['node_modules/**'] }),
            ...pluginIf(ecma === 5, () => plugin_babel_1.default({
                plugins: [
                    require('@babel/plugin-transform-block-scoped-functions'),
                    require('@babel/plugin-transform-block-scoping'),
                    require('@babel/plugin-syntax-dynamic-import'),
                ],
                compact: false,
                babelrc: false,
                extensions: ['.js', '.json'],
                inputSourceMap: false,
                babelHelpers: 'bundled',
            })),
            workaroundRequireScope_1.default(),
            terser_1.default({
                ecma,
                safari10: component !== componentTargets_1.ComponentType.DEVICE,
                mangle: {
                    toplevel: true,
                },
                output: {
                    semicolons: false,
                },
                compress: {
                    toplevel: true,
                    arrows: component !== componentTargets_1.ComponentType.DEVICE,
                    keep_infinity: component !== componentTargets_1.ComponentType.DEVICE,
                    passes: 2,
                    sequences: false,
                },
            }),
        ],
        onwarn: rollupWarningHandler_1.default({
            onDiagnostic,
            codeCategories: allowUnknownExternals
                ? { UNRESOLVED_IMPORT: diagnostics_1.DiagnosticCategory.Warning }
                : undefined,
        }),
        inlineDynamicImports: component !== componentTargets_1.ComponentType.DEVICE,
    }, {
        dir: outputDir,
        file: outputDir === undefined ? `${component}.js` : undefined,
        format: 'cjs',
        sourcemap: true,
        sourcemapPathTransform: (mapPath) => path_1.default.normalize(outputDir === undefined ? mapPath : path_1.default.join(outputDir, mapPath)),
        interop: (id) => {
            if (id === null) {
                return 'auto';
            }
            if (platformExternals.externals[component].indexOf(id) === -1) {
                return 'auto';
            }
            if (component === componentTargets_1.ComponentType.DEVICE &&
                deviceModulesWithoutDefaultExports.has(id) &&
                sdkVersion_1.default().major < 6) {
                return 'auto';
            }
            return 'esModule';
        },
    });
}
exports.default = compile;
