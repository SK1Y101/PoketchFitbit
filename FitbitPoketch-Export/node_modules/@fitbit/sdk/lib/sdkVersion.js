"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apiVersions = void 0;
const tslib_1 = require("tslib");
const semver_1 = tslib_1.__importDefault(require("semver"));
const BuildError_1 = tslib_1.__importDefault(require("./util/BuildError"));
const packageVersion_const_1 = tslib_1.__importDefault(require("./packageVersion.const"));
const apiBySdk = {
    '4.3': { deviceApi: '6.0.0', companionApi: '3.3.0' },
    '5.0': { deviceApi: '7.0.0', companionApi: '3.1.0' },
    '5.1': { deviceApi: '7.1.0', companionApi: '3.1.0' },
    '6.0': { deviceApi: '8.1.0', companionApi: '3.3.0' },
};
function sdkVersion(toolchainVersion = packageVersion_const_1.default) {
    const version = semver_1.default.parse(toolchainVersion);
    if (version === null) {
        throw new Error(`Invalid SDK package version: ${toolchainVersion}`);
    }
    version.patch = 0;
    version.prerelease = [];
    version.format();
    return version;
}
exports.default = sdkVersion;
function apiVersions(projectConfig = {}, toolchainVersion = packageVersion_const_1.default) {
    if (projectConfig.enableProposedAPI) {
        return { deviceApi: '*', companionApi: '*' };
    }
    const { major, minor } = sdkVersion(toolchainVersion);
    const sdk = `${major}.${minor}`;
    const componentVersions = apiBySdk[sdk];
    if (!componentVersions) {
        throw new BuildError_1.default(`No known API versions for SDK package version ${sdk}`);
    }
    return componentVersions;
}
exports.apiVersions = apiVersions;
