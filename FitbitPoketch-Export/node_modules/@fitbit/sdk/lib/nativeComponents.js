"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const stream_1 = tslib_1.__importDefault(require("stream"));
const elfy_1 = tslib_1.__importDefault(require("elfy"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const plugin_error_1 = tslib_1.__importDefault(require("plugin-error"));
const vinyl_1 = tslib_1.__importDefault(require("vinyl"));
const PLUGIN_NAME = 'nativeComponents';
function checkBufferLength(buffer, expectedLength, name) {
    if (buffer.length !== expectedLength) {
        throw new plugin_error_1.default(PLUGIN_NAME, `${name} must be ${expectedLength} bytes, found ${buffer.length} in ${buffer}`);
    }
}
function formatUUID(buffer) {
    const uuid = buffer.toString('hex');
    return [
        uuid.substr(0, 8),
        uuid.substr(8, 4),
        uuid.substr(12, 4),
        uuid.substr(16, 4),
        uuid.substr(20, 12),
    ].join('-');
}
function readMetadata(elfPath) {
    const elfData = fs_1.default.readFileSync(elfPath);
    const elf = elfy_1.default.parse(elfData);
    const elfSections = lodash_1.default.groupBy(elf.body.sections, (s) => s.name);
    function findSection(name) {
        const sectionName = `.${name}`;
        const sections = elfSections[sectionName];
        if (!sections) {
            throw new plugin_error_1.default(PLUGIN_NAME, `ELF section '${name}' is missing`, {
                fileName: elfPath,
            });
        }
        if (sections.length > 1) {
            throw new plugin_error_1.default(PLUGIN_NAME, `ELF section '${name}' is present more than once`, { fileName: elfPath });
        }
        return sections[0].data;
    }
    const buildIDData = findSection('buildid');
    checkBufferLength(buildIDData, 8, 'Build ID');
    const appIDData = findSection('appuuid');
    checkBufferLength(appIDData, 16, 'App UUID');
    const platformJSON = findSection('appplatform').toString();
    let platform;
    try {
        platform = JSON.parse(platformJSON);
    }
    catch (ex) {
        throw new plugin_error_1.default(PLUGIN_NAME, `Could not parse platform specification in .appplatform section: ${ex.message}`, { fileName: elfPath });
    }
    if (!Array.isArray(platform)) {
        throw new plugin_error_1.default(PLUGIN_NAME, `Platform specification should be an array, but found a ${typeof platform}`, { fileName: elfPath });
    }
    return {
        platform,
        path: elfPath,
        data: elfData,
        appID: formatUUID(appIDData),
        buildID: `0x${Buffer.from(buildIDData).swap64().toString('hex')}`,
        family: findSection('appfamily').toString(),
    };
}
function nativeComponents(appID, componentPaths) {
    const components = componentPaths.map(readMetadata);
    const buildId = components[0].buildID;
    const divergentAppIDComponents = components.filter((c) => c.appID.toLowerCase() !== appID.toLowerCase());
    if (divergentAppIDComponents.length > 0) {
        const divergentAppIDsList = divergentAppIDComponents
            .map(({ path, family, appID }) => `${path} (${family}) has appID ${appID}`)
            .join('\n    ');
        throw new plugin_error_1.default(PLUGIN_NAME, `App IDs of native components do not match package.json.
    Expected appID ${appID}.
    ${divergentAppIDsList}`);
    }
    if (lodash_1.default.uniqBy(components, (c) => c.buildID).length > 1) {
        const mismatchedBuildIDs = components
            .map(({ path, family, buildID }) => `${path} (${family}) has buildID ${buildID}`)
            .join('\n    ');
        throw new plugin_error_1.default(PLUGIN_NAME, `Build IDs of native components do not match.
    ${mismatchedBuildIDs}`);
    }
    const componentStream = new stream_1.default.PassThrough({ objectMode: true });
    components.forEach(({ family, platform, data }) => componentStream.push(new vinyl_1.default({
        contents: data,
        path: `${family}.bundle`,
        componentBundle: { family, platform, type: 'device', isNative: true },
    })));
    componentStream.push(null);
    return {
        buildId,
        existingDeviceComponents: componentStream,
    };
}
exports.default = nativeComponents;
