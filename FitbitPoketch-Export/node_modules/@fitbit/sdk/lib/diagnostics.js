"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logDiagnosticToConsole = exports.DiagnosticTarget = exports.DiagnosticCategory = void 0;
const tslib_1 = require("tslib");
const path_1 = require("path");
const chalk_1 = tslib_1.__importDefault(require("chalk"));
const dateformat_1 = tslib_1.__importDefault(require("dateformat"));
const indentString_1 = tslib_1.__importDefault(require("./util/indentString"));
var DiagnosticCategory;
(function (DiagnosticCategory) {
    DiagnosticCategory[DiagnosticCategory["Warning"] = 0] = "Warning";
    DiagnosticCategory[DiagnosticCategory["Error"] = 1] = "Error";
    DiagnosticCategory[DiagnosticCategory["Suggestion"] = 2] = "Suggestion";
    DiagnosticCategory[DiagnosticCategory["Message"] = 3] = "Message";
})(DiagnosticCategory = exports.DiagnosticCategory || (exports.DiagnosticCategory = {}));
var DiagnosticTarget;
(function (DiagnosticTarget) {
    DiagnosticTarget["App"] = "app";
    DiagnosticTarget["Companion"] = "companion";
    DiagnosticTarget["Settings"] = "settings";
})(DiagnosticTarget = exports.DiagnosticTarget || (exports.DiagnosticTarget = {}));
const consoleColors = {
    [DiagnosticCategory.Warning]: chalk_1.default.keyword('orange'),
    [DiagnosticCategory.Error]: chalk_1.default.red,
    [DiagnosticCategory.Message]: chalk_1.default,
    [DiagnosticCategory.Suggestion]: chalk_1.default,
};
const categoryNames = {
    [DiagnosticCategory.Warning]: 'warn',
    [DiagnosticCategory.Error]: 'error',
    [DiagnosticCategory.Message]: 'info',
    [DiagnosticCategory.Suggestion]: 'suggestion',
};
const logDiagnosticToConsole = (diagnostic) => {
    const { category, messageText, target } = diagnostic;
    let filePosition = '';
    if (diagnostic.file) {
        const { path, position } = diagnostic.file;
        filePosition += ` ${path_1.relative(process.cwd(), path)}`;
        if (position) {
            filePosition += `:${position.start.line + 1}`;
            if ('character' in position.start) {
                filePosition += `,${position.start.character + 1}`;
            }
        }
    }
    const now = new Date();
    const timestamp = dateformat_1.default(now, 'HH:MM:ss');
    const colorizer = consoleColors[category];
    const categoryName = categoryNames[category];
    const targetString = target ? target : 'build';
    const message = typeof messageText === 'string' ? messageText : messageText[0].messageText;
    console.log(colorizer(`[${timestamp}][${categoryName}][${targetString}]${filePosition} ${message}`));
    if (typeof messageText !== 'string') {
        for (let i = 1; i < messageText.length; i += 1) {
            console.log(consoleColors[messageText[i].category](indentString_1.default(messageText[i].messageText, 4)));
        }
    }
};
exports.logDiagnosticToConsole = logDiagnosticToConsole;
