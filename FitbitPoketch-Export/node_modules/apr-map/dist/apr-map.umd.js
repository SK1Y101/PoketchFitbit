(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('lodash.defaults'), require('apr-engine-each'), require('apr-engine-sum')) :
	typeof define === 'function' && define.amd ? define('apr-map', ['exports', 'lodash.defaults', 'apr-engine-each', 'apr-engine-sum'], factory) :
	(factory((global['apr-map'] = {}),global.defaults,global.aprEngineEach,global.Sum));
}(this, (function (exports,defaults,aprEngineEach,Sum) { 'use strict';

defaults = defaults && defaults.hasOwnProperty('default') ? defaults['default'] : defaults;
aprEngineEach = aprEngineEach && aprEngineEach.hasOwnProperty('default') ? aprEngineEach['default'] : aprEngineEach;
Sum = Sum && Sum.hasOwnProperty('default') ? Sum['default'] : Sum;

var run = function (ctx) {
  var sum = Sum(ctx.input);

  return aprEngineEach(defaults({
    after: function after(value, item) {
      sum[item.key] = value;
    }
  }, ctx)).then(function () {
    return sum;
  });
};

/**
 * @kind function
 * @name limit
 * @memberof map
 * @param {Array|Object|Iterable} input
 * @param {Number} limit
 * @param {Function} iteratee
 * @returns {Promise}
 */
var limit = function (input, limit, fn, opts) {
  return run({
    input: input,
    fn: fn,
    opts: defaults({
      limit: limit
    }, opts)
  });
};

/**
 * @kind function
 * @name series
 * @memberof map
 * @param {Array|Object|Iterable} input
 * @param {Function} iteratee
 * @returns {Promise}
 */
var series = function (input, fn, opts) {
  return limit(input, 1, fn, opts);
};

/**
 * <a id="map"></a>
 * Produces a new collection of values by mapping each value in `coll` through the `iteratee` function.
 *
 * [![](https://img.shields.io/npm/v/apr-map.svg?style=flat-square)](https://www.npmjs.com/package/apr-map) [![](https://img.shields.io/npm/l/apr-map.svg?style=flat-square)](https://www.npmjs.com/package/apr-map)
 *
 * @kind function
 * @name map
 * @param {Array|Object|Iterable} input
 * @param {Function} iteratee
 * @returns {Promise}
 *
 * @example
 * import awaitify from 'apr-awaitify';
 * import map from 'apr-map';
 *
 * const stat = awaitify(fs.stat);
 * const files = [
 *   'file1',
 *   'file2',
 *   'file3'
 * ];
 *
 * const stats = await map(files, async (file) =>
 *   await stat(file);
 * );
 */
var map = function (input, fn, opts) {
  return run({
    input: input,
    fn: fn,
    opts: opts
  });
};

var series$2 = series;
var limit$2 = limit;

map.series = series$2;
map.limit = limit$2;

exports['default'] = map;
exports.series = series$2;
exports.limit = limit$2;

Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9yYW1pdG9zL2Rldi9hcHIvcGFja2FnZXMvbWFwL3J1bi5qcyIsIi9Vc2Vycy9yYW1pdG9zL2Rldi9hcHIvcGFja2FnZXMvbWFwL2xpbWl0LmpzIiwiL1VzZXJzL3JhbWl0b3MvZGV2L2Fwci9wYWNrYWdlcy9tYXAvc2VyaWVzLmpzIiwiL1VzZXJzL3JhbWl0b3MvZGV2L2Fwci9wYWNrYWdlcy9tYXAvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZGVmYXVsdHMgPSByZXF1aXJlKCdsb2Rhc2guZGVmYXVsdHMnKTtcblxuY29uc3QgZWFjaCA9IHJlcXVpcmUoJ2Fwci1lbmdpbmUtZWFjaCcpO1xuY29uc3QgU3VtID0gcmVxdWlyZSgnYXByLWVuZ2luZS1zdW0nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBjdHggPT4ge1xuICBjb25zdCBzdW0gPSBTdW0oY3R4LmlucHV0KTtcblxuICByZXR1cm4gZWFjaChcbiAgICBkZWZhdWx0cyhcbiAgICAgIHtcbiAgICAgICAgYWZ0ZXI6ICh2YWx1ZSwgaXRlbSkgPT4ge1xuICAgICAgICAgIHN1bVtpdGVtLmtleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGN0eFxuICAgIClcbiAgKS50aGVuKCgpID0+IHN1bSk7XG59O1xuIiwiY29uc3QgZGVmYXVsdHMgPSByZXF1aXJlKCdsb2Rhc2guZGVmYXVsdHMnKTtcbmNvbnN0IHJ1biA9IHJlcXVpcmUoJy4vcnVuJyk7XG5cbi8qKlxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBuYW1lIGxpbWl0XG4gKiBAbWVtYmVyb2YgbWFwXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdHxJdGVyYWJsZX0gaW5wdXRcbiAqIEBwYXJhbSB7TnVtYmVyfSBsaW1pdFxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWVcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IChpbnB1dCwgbGltaXQsIGZuLCBvcHRzKSA9PlxuICBydW4oe1xuICAgIGlucHV0LFxuICAgIGZuLFxuICAgIG9wdHM6IGRlZmF1bHRzKFxuICAgICAge1xuICAgICAgICBsaW1pdFxuICAgICAgfSxcbiAgICAgIG9wdHNcbiAgICApXG4gIH0pO1xuIiwiY29uc3QgbGltaXQgPSByZXF1aXJlKCcuL2xpbWl0Jyk7XG5cbi8qKlxuICogQGtpbmQgZnVuY3Rpb25cbiAqIEBuYW1lIHNlcmllc1xuICogQG1lbWJlcm9mIG1hcFxuICogQHBhcmFtIHtBcnJheXxPYmplY3R8SXRlcmFibGV9IGlucHV0XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZVxuICogQHJldHVybnMge1Byb21pc2V9XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGlucHV0LCBmbiwgb3B0cykgPT4gbGltaXQoaW5wdXQsIDEsIGZuLCBvcHRzKTtcbiIsImNvbnN0IHJ1biA9IHJlcXVpcmUoJy4vcnVuJyk7XG5cbi8qKlxuICogPGEgaWQ9XCJtYXBcIj48L2E+XG4gKiBQcm9kdWNlcyBhIG5ldyBjb2xsZWN0aW9uIG9mIHZhbHVlcyBieSBtYXBwaW5nIGVhY2ggdmFsdWUgaW4gYGNvbGxgIHRocm91Z2ggdGhlIGBpdGVyYXRlZWAgZnVuY3Rpb24uXG4gKlxuICogWyFbXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS92L2Fwci1tYXAuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlKV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYXByLW1hcCkgWyFbXShodHRwczovL2ltZy5zaGllbGRzLmlvL25wbS9sL2Fwci1tYXAuc3ZnP3N0eWxlPWZsYXQtc3F1YXJlKV0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYXByLW1hcClcbiAqXG4gKiBAa2luZCBmdW5jdGlvblxuICogQG5hbWUgbWFwXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdHxJdGVyYWJsZX0gaW5wdXRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IGF3YWl0aWZ5IGZyb20gJ2Fwci1hd2FpdGlmeSc7XG4gKiBpbXBvcnQgbWFwIGZyb20gJ2Fwci1tYXAnO1xuICpcbiAqIGNvbnN0IHN0YXQgPSBhd2FpdGlmeShmcy5zdGF0KTtcbiAqIGNvbnN0IGZpbGVzID0gW1xuICogICAnZmlsZTEnLFxuICogICAnZmlsZTInLFxuICogICAnZmlsZTMnXG4gKiBdO1xuICpcbiAqIGNvbnN0IHN0YXRzID0gYXdhaXQgbWFwKGZpbGVzLCBhc3luYyAoZmlsZSkgPT5cbiAqICAgYXdhaXQgc3RhdChmaWxlKTtcbiAqICk7XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gKGlucHV0LCBmbiwgb3B0cykgPT5cbiAgcnVuKHtcbiAgICBpbnB1dCxcbiAgICBmbixcbiAgICBvcHRzXG4gIH0pO1xuXG5tb2R1bGUuZXhwb3J0cy5zZXJpZXMgPSByZXF1aXJlKCcuL3NlcmllcycpO1xubW9kdWxlLmV4cG9ydHMubGltaXQgPSByZXF1aXJlKCcuL2xpbWl0Jyk7XG4iXSwibmFtZXMiOlsibW9kdWxlIiwic3VtIiwiU3VtIiwiY3R4IiwiaW5wdXQiLCJlYWNoIiwiZGVmYXVsdHMiLCJ2YWx1ZSIsIml0ZW0iLCJrZXkiLCJ0aGVuIiwibGltaXQiLCJmbiIsIm9wdHMiLCJydW4iLCJyZXF1aXJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBS0FBLE9BQUEsR0FBaUIsZUFBTztNQUNoQkMsTUFBTUMsSUFBSUMsSUFBSUMsS0FBUixDQUFaOztTQUVPQyxjQUNMQyxTQUNFO1dBQ1MsZUFBQ0MsS0FBRCxFQUFRQyxJQUFSLEVBQWlCO1VBQ2xCQSxLQUFLQyxHQUFULElBQWdCRixLQUFoQjs7R0FITixFQU1FSixHQU5GLENBREssRUFTTE8sSUFUSyxDQVNBO1dBQU1ULEdBQU47R0FUQSxDQUFQO0NBSEY7O0FDRkE7Ozs7Ozs7OztBQVNBRCxTQUFBLEdBQWlCLFVBQUNJLEtBQUQsRUFBUU8sS0FBUixFQUFlQyxFQUFmLEVBQW1CQyxJQUFuQjtTQUNmQyxJQUFJO2dCQUFBO1VBQUE7VUFHSVIsU0FDSjs7S0FESSxFQUlKTyxJQUpJO0dBSFIsQ0FEZTtDQUFqQjs7QUNWQTs7Ozs7Ozs7QUFRQWIsVUFBQSxHQUFpQixVQUFDSSxLQUFELEVBQVFRLEVBQVIsRUFBWUMsSUFBWjtTQUFxQkYsTUFBTVAsS0FBTixFQUFhLENBQWIsRUFBZ0JRLEVBQWhCLEVBQW9CQyxJQUFwQixDQUFyQjtDQUFqQjs7QUNSQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMkJBYixPQUFBLEdBQWlCLFVBQUNJLEtBQUQsRUFBUVEsRUFBUixFQUFZQyxJQUFaO1NBQ2ZDLElBQUk7Z0JBQUE7VUFBQTs7R0FBSixDQURlO0NBQWpCOztBQU9BZCxZQUFBLEdBQXdCZSxNQUF4QjtBQUNBZixXQUFBLEdBQXVCZSxLQUF2Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=